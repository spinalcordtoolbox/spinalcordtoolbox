[tool:pytest]
addopts = --show-capture=stderr --tb=native
python_files = testing/**/test_*.py
# The parent folder for SCT's conda installation is called `python`.
norecursedirs = python
markers =
    sct_testing: marks tests that belonged to previous testing harness (often used by users to verify installation)
filterwarnings =
##############################
# Numerical-related warnings #
##############################
    # 1. RuntimeWarnings usually come from numpy/scipy/etc. numerical issues. These should be taken
    #    seriously, but are time-consuming to debug. These should definitely be explored in future issues.
    #    1a. This is the most frequent error. Happens in at least 5 separate LOCs.
    ignore:invalid value encountered in subtract.*:RuntimeWarning:
    ignore:invalid value encountered in divide.*:RuntimeWarning:
    ignore:invalid value encountered in scalar divide.*:RuntimeWarning:
    #    1b. This is the second-most frequent error. Happens in at least 2 separate LOCs.
    ignore:invalid value encountered in double_scalars.*:RuntimeWarning:
    #    1c. This happens once: `test_cli_register_to_template` --> `compute_pca()` --> `coordsrc.mean(0)`
    ignore:Mean of empty slice.*:RuntimeWarning:
    #    1d. This happens once: `test_cli_register_to_template` --> `compute_pca()` --> `coordsrc.std()`
    ignore:Degrees of freedom <= 0 for slice.*:RuntimeWarning:
    # 2. RankWarning stemming from 'np.polynomial.Polynomial.fit()' (1 warning)
    #    Source: test_get_centerline_optic[params2] --> `curve_fitting.py :: polyfit_1d()`
    ignore:The fit may be poorly conditioned.*::numpy.*:
    # 3. ConvergenceWarning stemming from 'sklearn.linear_model._coordinate_descent.enet_coordinate_descent()'
    #    Source: test_sct_dmri_denoise_patch2self --> `dipy.patch2self` --> `sklearn.linear_model.LinearRegression()`
    #    NB This issue is likely fixed by improving the quality of the `patch2self` dummy test data.
    ignore:Objective did not converge. You might want to increase the number of iterations.*::sklearn.*:
    # 4. UserWarning stemming from `dipy.gradients.read_bvals_bvecs()`
    #    Source: test_sct_dmri_denoise_patch2self --> `sct_dmri_concat_b0_and_dwi` --> `read_bvals_becs`
    #    NB: This issue is likely fixed by improving the quality of the `patch2self` dummy test data.
    ignore:Detected only 1 direction on your bvec file.*:UserWarning:dipy.*:
#####################
# Upstream warnings #
#####################
    # This warning is generated by packages built using Swig. (https://github.com/swig/swig/issues/2881)
    # I don't really know how to identify which packages are the problematic ones, since this only
    # appears when running the `sct_fmri_compute_tsnr -mask` test in pytest, but not when running the
    # same function in the command line, and the FMRI script doesn't have unique packages it imports.
    # So, for now, we can just ignore it.
    ignore:.*builtin type SwigPyObject has no __module__ attribute.*:DeprecationWarning::
    ignore:.*builtin type SwigPyPacked has no __module__ attribute.*:DeprecationWarning::
    ignore:.*builtin type swigvarlink has no __module__ attribute.*:DeprecationWarning::
    # The following are upstream dependencies that have DeprecationWarnings for THEIR dependencies.
    # We can't do much about these besides alert the upstream packages + upgrade where possible.
    # NB: Pystrum/VoxelMorph aren't well-maintained, but torch is. We should see if we can upgrade.
    ignore:.*inspect.getargspec.*:DeprecationWarning:voxelmorph.*:
    ignore:.*scipy.ndimage.*:DeprecationWarning:monai.*:
    ignore:.*scipy.ndimage.*:DeprecationWarning:batchgenerators.*:
    ignore:.*scipy.ndimage.*:DeprecationWarning:nnunetv2.*:
    # NB: This UserWarning is also an upstream issue, this time with the PyTorch version of the VoxelMorph network.
    #     I'm not sure if we can do much here, but it will only become an issue if and when we upgrade torch.
    # Source: test_sct_register_multimodal_mto_image_data --> `algorithms.py :: vxm.networks.VxmDense()`
    ignore:.*in an upcoming release, it will be required to pass the indexing argument.*:UserWarning:torch.*:
    # This warning is due to a deprecation for a call that is still used by many upstream packages. In our case:
    # - monai: https://github.com/Project-MONAI/MONAI/issues/7559
    ignore:pkg_resources is deprecated as an API:DeprecationWarning:monai.*:
    # These warnings are for non-GUI backends on headless machines (i.e. CI), so it's safe to ignore.
    ignore:Matplotlib is currently using agg.*:UserWarning:
    ignore:.*is non-interactive, and thus cannot be shown:UserWarning:
    # This is a warning we ourselves generate, and needs discussion
    # Revisit as part of: https://github.com/spinalcordtoolbox/spinalcordtoolbox/issues/4357
    ignore:.*with additional arguments is discouraged:UserWarning:
    # NB: `pandas` is being held to <2.0.0 by ivadomed, but numpy is free to upgrade, resulting in several upstream
    # deprecation warnings by mixing an out-of-date pandas with an up-to-date numpy.
    ignore:np.find_common_type is deprecated:DeprecationWarning:pandas.*:
    ignore:NumPy will stop allowing conversion:DeprecationWarning:pandas.*:
    # MONAI/nnUNet warnings: https://github.com/spinalcordtoolbox/spinalcordtoolbox/issues/4404
    ignore:Detected old nnU-Net plans format:UserWarning:nnunetv2.*:
    ignore:.*Our suggested max number of worker.*:UserWarning:torch.*:

[flake8]
max-line-length = 179
extend-exclude = python  # Exclude SCT's miniconda dir to avoid scanning dependency `.py` files
