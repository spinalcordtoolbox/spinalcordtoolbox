name: Test past releases

on: 
  workflow_dispatch:
  schedule:
    # https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#onschedule
    # > Scheduled workflows run on the latest commit on the default or base branch
    # i.e. this can only run on master
    - cron:  '0 11 * * 0'
env:
    # Even when given -y, apt will still sometimes hang at a prompt if a package
    # has clarifications to ask; DEBIAN_FRONTEND=noninteractive prevents that,
    # This will be defined for non-debian platforms below too, but there's no harm in that.
    # (TravisCI quietly defined this on all their platforms, but we have to give it manually on GithubCI.)
    DEBIAN_FRONTEND: 'noninteractive'
    # Turns on color output for pytest. See: https://github.com/pytest-dev/pytest/issues/7443#issuecomment-656642591
    PY_COLORS: "1"
    # Disable progress bars for less verbose output
    PIP_PROGRESS_BAR: "off"
    SCT_PROGRESS_BAR: "off"

jobs:

  test_past_releases:
    name: Test past releases
    strategy:
      fail-fast: false
      matrix:
        sct_version: [ "6.5", "6.4", "6.3", "6.2", "6.1", "6.0", "5.8", "5.7", "5.6", "5.5", "5.4", "5.3.0", "5.2.0", "5.1.0" ]
        os: [ ubuntu-latest, macos-latest, macos-15, windows-2025 ]
        exclude:
          # Windows support was only properly introduced in 5.7
          - sct_version: "5.6"
            os: windows-2025
          - sct_version: "5.5"
            os: windows-2025
          - sct_version: "5.4"
            os: windows-2025
          - sct_version: "5.3.0"
            os: windows-2025
          - sct_version: "5.2.0"
            os: windows-2025
          - sct_version: "5.1.0"
            os: windows-2025
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ matrix.sct_version }}

      - name: Install SCT (Unix)
        if: runner.os != 'Windows'
        run: ./install_sct -y

      - name: Force Python 3.7 (Windows, SCT v5.7)
        if: runner.os == 'Windows' && matrix.sct_version == '5.7'
        # Version 5.7-5.8's Windows installer tapped into the system python, meaning we need to set it up ourselves here
        uses: actions/setup-python@v5
        with:
          python-version: '3.7'

      - name: Force Python 3.8 (Windows, SCT v5.8)
        if: runner.os == 'Windows' && matrix.sct_version == '5.8'
        # Version 5.7-5.8's Windows installer tapped into the system python, meaning we need to set it up ourselves here
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Install SCT (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: install_sct.bat

      - name: Update environment variables
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            export VERSION_TXT=$(< spinalcordtoolbox/version.txt)
            # SCT_DIR was different in the first iteration of Windows support
            if [ "${VERSION_TXT}" == "5.7" ] || [ ${VERSION_TXT} == "5.8" ]; then
              export SCT_DIR="D:\a\spinalcordtoolbox\spinalcordtoolbox"
            else
              export SCT_DIR="$USERPROFILE\sct_${VERSION_TXT}"
            fi

            # NB: I'm not sure what GHA's syntax is for cmd.exe, so we use bash to set the environment variables.
            # In a user install, the user would perform this step using the Windows environment variable changing GUI.
            echo "SCT_DIR=$SCT_DIR" >> $GITHUB_ENV
            echo "$SCT_DIR\bin" >> $GITHUB_PATH

          else

            # NB: install_sct edits ~/.bashrc, but those environment changes don't get passed to subsequent steps in GH Actions.
            # So, we filter through the .bashrc and pass the values to $GITHUB_ENV and $GITHUB_PATH.
            # Relevant documentation: https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#environment-files
            # This workaround should be replaced by https://github.com/spinalcordtoolbox/spinalcordtoolbox/pull/3198#discussion_r568225392
            cat ~/.bashrc | grep "export SCT_DIR" | cut -d " " -f 2 >> $GITHUB_ENV
            cat ~/.bashrc | grep "export PATH" | grep -o "/.*" | cut -d ':' -f 1 >> $GITHUB_PATH

          fi

      - name: Check dependencies
        # windows + SCT v5.7 fails with a DLL error here, but I'm not sure if that impacts the tests too, so continue
        continue-on-error: true
        run: sct_check_dependencies

      # In SCT v5.4, the `sct_testing` testing framework was taken away, replaced with pytest.
      # But, in SCT v5.5, the `sct_testing` name was re-used as an alias for pytest.
      # This means that, for only v5.4, we need to run the tests differently by calling pytest directly.
      - name: Run tests (v5.4)
        if: matrix.sct_version == '5.4'
        run: ./python/envs/venv_sct/bin/pytest ./testing
      - name: Run tests (non-v5.4)
        if: matrix.sct_version != '5.4' && matrix.os != 'windows-2025'
        run: sct_testing

      # The model `seg_sc_t2star` is failing on Windows 2025, but not on other platforms.
      # It seems to produce non-deterministic outputs with varying Dice scores between runs.
      # However, this model has been retired in v7.0, and was not really used even when it
      # was available. So, we can just skip the test when running tests on Windows 2025.
      - name: Run tests (non-v5.4, Windows 2025)
        if: matrix.sct_version != '5.4' && matrix.os == 'windows-2025'
        run: sct_testing -k 'not (test_segment_nifti and seg_sc_t2star)'