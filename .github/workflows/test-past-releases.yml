name: Test past releases

on:
  schedule:
    # https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#onschedule
    # > Scheduled workflows run on the latest commit on the default or base branch
    # i.e. this can only run on master
    - cron:  '0 11 * * 0'
env:
    # Even when given -y, apt will still sometimes hang at a prompt if a package
    # has clarifications to ask; DEBIAN_FRONTEND=noninteractive prevents that,
    # This will be defined for non-debian platforms below too, but there's no harm in that.
    # (TravisCI quietly defined this on all their platforms, but we have to give it manually on GithubCI.)
    DEBIAN_FRONTEND: 'noninteractive'
    # Turns on color output for pytest. See: https://github.com/pytest-dev/pytest/issues/7443#issuecomment-656642591
    PY_COLORS: "1"
    # Disable progress bars for less verbose output
    PIP_PROGRESS_BAR: "off"
    SCT_PROGRESS_BAR: "off"

jobs:

  test_past_releases:
    name: Test past releases
    strategy:
      fail-fast: false
      matrix:
        sct_version: [ "6.5", "6.4", "6.3", "6.2", "6.1", "6.0", "5.8", "5.7", "5.6", "5.5", "5.4", "5.3.0", "5.2.0", "5.1.0" ]
        os: [ ubuntu-latest, macos-latest, windows-2019 ]
        exclude:
          # Windows support was only properly introduced in 5.7
          - sct_version: "5.6"
            os: windows-2019
          - sct_version: "5.5"
            os: windows-2019
          - sct_version: "5.4"
            os: windows-2019
          - sct_version: "5.3.0"
            os: windows-2019
          - sct_version: "5.2.0"
            os: windows-2019
          - sct_version: "5.1.0"
            os: windows-2019
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ matrix.sct_version }}

      - name: Un-freeze `setuptools` and `packaging`
        # A user on the forum encountered the following error when installing SCT:
        #
        #           TypeError: canonicalize_version() got an unexpected keyword argument 'strip_trailing_zero'
        #
        # This occurs because the `packaging` library changed its API out of lockstep with `setuptools`, causing
        # `setuptools` to sometimes incorrectly call the `packaging` function depending on the versions of each
        # library. If we upgrade one but not the other, the two libraries can get out of sync.
        #
        # The issue is complicated further by the fact that `setuptools` currently gets installed *as a conda package*,
        # while `packaging` gets installed *as a pip package* (i.e. packaging gets frozen in requirements-freeze.txt).
        # This means that the conda `setuptools` + pip `packaging` might work fine when the release is drafted, but
        # since setuptools wasn't frozen, its version advances while packaging's doesn't.
        #
        # Ideally, we would go back in time and freeze setuptools alongside packaging. But, since we can't do that,
        # the easiest way to fix the issue in the short-term is:
        #
        #   1) Unfreeze `packaging` and any `setuptools-related` packages (such as `setuptools-types` that got frozen)
        #   2) Install `setuptools[core]`, which will install both `setuptools` and `packaging` as compatible conda packages.
        #
        # Once we confirm that everything works, we can then freeze the new versions of `setuptools` and `packaging`.
        run: |
          cat requirements-freeze.txt | grep -v "setuptools" > requirements-freeze-2.txt
          cat requirements-freeze-2.txt | grep -v "packaging" > requirements-freeze.txt

      - name: Install SCT (Unix)
        if: runner.os != 'Windows'
        run: |
          # Add fix for clash between pip 24.1 and dipy 1.5.0
          perl -i -pe 's/pip!=21.2.\*/pip!=21.2.\*,<24.1" "setuptools[core]/g;' install_sct
          ./install_sct -y

      - name: Windows hotfix for >=5.9 (separate bc bash)
        if: runner.os == 'Windows' && matrix.sct_version != '5.7' && matrix.sct_version != '5.8'
        shell: bash
        # Versions >=5.9 use the new syntax ("-U pip!=21.2) and also need the '^`' escape for the '!' character.
        run: perl -i -pe 's/pip\^!=21.2.\*/pip^!=21.2.\*,<24.1" "setuptools[core]/g;' install_sct.bat

      - name: Windows hotfix for v5.8 (separate bc bash)
        if: runner.os == 'Windows' && matrix.sct_version == '5.8'
        shell: bash
        # Version ==5.8 uses the old syntax ("--upgrade pip") and also needs the '^' escape for the '!' character.
        run: perl -i -pe 's/--upgrade pip /--upgrade "pip^!=21.2.\*,<24.1" "setuptools[core]"/g;' install_sct.bat

      - name: Windows hotfix for v5.7 (separate bc bash)
        if: runner.os == 'Windows' && matrix.sct_version == '5.7'
        shell: bash
        # Version ==5.7 uses the old syntax ("--upgrade pip") but doesn't need the carat escape.
        run: perl -i -pe 's/--upgrade pip /--upgrade "pip!=21.2.\*,<24.1" "setuptools[core]"/g;' install_sct.bat

      - name: Force Python 3.7 (Windows, SCT v5.7)
        if: runner.os == 'Windows' && matrix.sct_version == '5.7'
        # Version 5.7-5.8's Windows installer tapped into the system python, meaning we need to set it up ourselves here
        uses: actions/setup-python@v5
        with:
          python-version: '3.7'

      - name: Force Python 3.8 (Windows, SCT v5.8)
        if: runner.os == 'Windows' && matrix.sct_version == '5.8'
        # Version 5.7-5.8's Windows installer tapped into the system python, meaning we need to set it up ourselves here
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Install SCT (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: | 
          # Add fix for clash between pip 24.1 and dipy 1.5.0
          install_sct.bat

      - name: Update environment variables
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            # SCT_DIR was different in the first iteration of Windows support
            if [ "${{ matrix.sct_version }}" == "5.7" ] || [ "${{ matrix.sct_version }}" == "5.8" ]; then
              export SCT_DIR="D:\a\spinalcordtoolbox\spinalcordtoolbox"
            else
              export SCT_DIR="$USERPROFILE\sct_${{ matrix.sct_version }}"
            fi

            # NB: I'm not sure what GHA's syntax is for cmd.exe, so we use bash to set the environment variables.
            # In a user install, the user would perform this step using the Windows environment variable changing GUI.
            echo "SCT_DIR=$SCT_DIR" >> $GITHUB_ENV
            echo "$SCT_DIR\bin" >> $GITHUB_PATH

          else

            # NB: install_sct edits ~/.bashrc, but those environment changes don't get passed to subsequent steps in GH Actions.
            # So, we filter through the .bashrc and pass the values to $GITHUB_ENV and $GITHUB_PATH.
            # Relevant documentation: https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#environment-files
            # This workaround should be replaced by https://github.com/spinalcordtoolbox/spinalcordtoolbox/pull/3198#discussion_r568225392
            cat ~/.bashrc | grep "export SCT_DIR" | cut -d " " -f 2 >> $GITHUB_ENV
            cat ~/.bashrc | grep "export PATH" | grep -o "/.*" | cut -d ':' -f 1 >> $GITHUB_PATH

          fi

      - name: Check dependencies
        # windows + SCT v5.7 fails with a DLL error here, but I'm not sure if that impacts the tests too, so continue
        continue-on-error: true
        run: sct_check_dependencies

      # In SCT v5.4, the `sct_testing` testing framework was taken away, replaced with pytest.
      # But, in SCT v5.5, the `sct_testing` name was re-used as an alias for pytest.
      # This means that, for only v5.4, we need to run the tests differently by calling pytest directly.
      - name: Run tests (v5.4)
        if: matrix.sct_version == '5.4'
        run: ./python/envs/venv_sct/bin/pytest ./testing
      - name: Run tests (non-v5.4)
        if: matrix.sct_version != '5.4'
        run: sct_testing