name: "Create release"

on:
  workflow_dispatch:
    inputs:
      milestone_title:
        description: 'Milestone title (this release)'
        required: true
      dry_run:
        description: "Dry Run; if True, no changes are made on the repo and no release is made (but everything else is run!)"
        type: choice
        options:
          - 'True'
          - 'False'
        default: 'True'
  schedule:
    # https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#onschedule
    # > Scheduled workflows run on the latest commit on the default or base branch
    # i.e. this can only run on master
    - cron: '0 11 * * *'

env:
  MAIN_BRANCH: "master"
  RELEASE_BRANCH: "release"
  # Turns on color output for pytest. See: https://github.com/pytest-dev/pytest/issues/7443#issuecomment-656642591
  PY_COLORS: "1"
  # Disable progress bars for less verbose output
  PIP_PROGRESS_BAR: "off"
  SCT_PROGRESS_BAR: "off"


jobs:
  generate-requirements-freeze:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout spinalcordtoolbox
      uses: actions/checkout@v4

    - name: Install spinalcordtoolbox
      run: |
        ./install_sct -iy

    # TODO: "grep certifi" should be removed following an upstream fix for: https://github.com/conda/conda/issues/11580
    - name: Update requirements-freeze.txt
      run: |
        source python/etc/profile.d/conda.sh
        conda activate venv_sct
        pip freeze | grep -v "-e git+" | grep -v "torch" | grep -v "certifi @ file" > requirements-freeze.txt
        conda deactivate
        grep "# append_to_freeze" requirements.txt >> requirements-freeze.txt

    - name: Upload requirements-freeze.txt
      uses: actions/upload-artifact@v4
      with:
        name: requirements-freeze
        path: requirements-freeze.txt

  generate-install-methods:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout spinalcordtoolbox
        uses: actions/checkout@v4

      - name: Create Installation Script Directory
        # KO: This directory makes artifacting everything together much easier later
        run: |
          mkdir install_scripts

      - name: Create ${{ github.event.inputs.milestone_title }} Native Windows install script
        run: |
          cp install_sct.bat install_sct-${{ github.event.inputs.milestone_title }}_win.bat
          perl -pi -e 's/set git_ref=master/set git_ref=${{ github.event.inputs.milestone_title }}/' install_sct-${{ github.event.inputs.milestone_title }}_win.bat
          mv install_sct-${{ github.event.inputs.milestone_title }}_win.bat install_scripts/

      - name: Create ${{ github.event.inputs.milestone_title }} Linux/macOS install scripts
        # NB: `install_sct` works for both Linux and macOS platforms. So, here, we simply duplicate the script for both
        # platforms (which will allow us to collect some rudimentary statistics + make our installation steps clearer).
        run: |
          cp install_sct install_sct-${{ github.event.inputs.milestone_title }}_linux.sh
          perl -pi -e 's/SCT_GIT_REF="master"/SCT_GIT_REF="${{ github.event.inputs.milestone_title }}"/' install_sct-${{ github.event.inputs.milestone_title }}_linux.sh
          mv install_sct-${{ github.event.inputs.milestone_title }}_linux.sh install_scripts/
          cp install_scripts/install_sct-${{ github.event.inputs.milestone_title }}_linux.sh install_scripts/install_sct-${{ github.event.inputs.milestone_title }}_macos.sh

      - name: Generate Apptainer Tarball
        run: |
          cd ./contrib/apptainer
          ./bundle_for_release.sh ${{ github.event.inputs.milestone_title }}
          mv sct_apptainer_${{ github.event.inputs.milestone_title }}.tar.gz ../../install_scripts

      - name: Upload Install Scripts
        uses: actions/upload-artifact@v4
        with:
          name: install-scripts
          path: install_scripts/*

  test-release:
    # The purpose of this step is to run tests using the requirements-freeze file
    # In 99% of cases, this will be identical to running tests using `requirements.txt`. But, sometimes
    # there are unique bugs that arise from using the `requirements-freeze.txt` file.
    needs: generate-requirements-freeze
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04, macos-13, macos-14, macos-15, windows-2022, windows-2025]
    runs-on: ${{ matrix.os }}
    # NB: Setting `bash` as the default shell is a bit of a hack workaround for Windows to allow it to run .sh scripts.
    #     Normally, we would ask the user to install a Windows-compatible bash via either Cygwin or Git for Windows.
    #     But, setting `bash` here is the quickest/easiest way to get a cross-OS compatible GHA workflow.
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout spinalcordtoolbox
      uses: actions/checkout@v4

    - name: Download requirements-freeze.txt
      uses: actions/download-artifact@v4
      with:
        name: requirements-freeze

    - name: Update version.txt (using test value for CI)
      run: |
        echo "0.0" > spinalcordtoolbox/version.txt

    - name: Install SCT from release branch (Unix)
      if: runner.os != 'Windows'
      run: ./install_sct -yc

    - name: Install SCT from release branch (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: install_sct.bat

    - name: Update environment variables
      # NB: I'm not sure what GHA's syntax is for cmd.exe, so we use bash just for this one change
      # In a user install, the user would perform this step using the Windows PATH-changing GUI.
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          # NB: Because `requirements-freeze.txt` is present, SCT gets installed to `~/sct_0.0`, 
          # rather than an in-place install. So, we specify this path directly, rather than using $GITHUB_WORKSPACE.
          echo "${USERPROFILE}\sct_0.0\bin" >> $GITHUB_PATH
        else
          # NB: install_sct edits ~/.bashrc, but those environment changes don't get passed to subsequent steps in GH Actions.
          # So, we filter through the .bashrc and pass the values to $GITHUB_ENV and $GITHUB_PATH.
          # Relevant documentation: https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#environment-files
          # This workaround should be replaced by https://github.com/spinalcordtoolbox/spinalcordtoolbox/pull/3198#discussion_r568225392
          cat ~/.bashrc | grep "export SCT_DIR" | cut -d " " -f 2 >> $GITHUB_ENV
          cat ~/.bashrc | grep "export PATH" | grep -o "/.*" | cut -d ':' -f 1 >> $GITHUB_PATH
        fi

    - name: Run sct_check_dependencies
      run: |
        sct_check_dependencies

    - name: Run sct_testing
      run: |
        sct_testing

  create-release:
    needs: [test-release, generate-install-methods]
    runs-on: ubuntu-latest
    # Only create a release on GitHub if workflow is run manually. (This allows the other steps in the workflow to test PRs.)
    # We also only make a "real" release if the user explicitly requested it (`dry_run == False`); this allows us to
    #  test changes to this script (and other release-affecting scripts) without cluttering the GitHub repo!
    # KO: The order of this evaluation is important; the latter is only "real" in the context of workflow_dispatch
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'False'
    steps:
    # The GitHub Actions bot email was taken from: https://github.community/t/github-actions-bot-email-address/17204/6
    - name: Set bot user data for commits
      run: |
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "GitHub Actions Bot"

    - name: Checkout spinalcordtoolbox (main branch)
      uses: actions/checkout@v4
      with:
        ref: ${{ env.MAIN_BRANCH }}
        fetch-depth: 0

    - name: Download requirements-freeze.txt (for release)
      uses: actions/download-artifact@v4
      with:
        name: requirements-freeze

    - name: Download Install Scripts
      uses: actions/download-artifact@v4
      with:
        name: install-scripts

    - name: Commit requirements-freeze.txt (for release)
      run: |
        git checkout -b bot/${{ github.event.inputs.milestone_title }}
        git add requirements-freeze.txt
        git commit -m "Update requirements-freeze.txt for ${{ github.event.inputs.milestone_title }}"

    - name: Update version.txt (for release)
      run: |
        echo "${{ github.event.inputs.milestone_title }}" > spinalcordtoolbox/version.txt
        git add spinalcordtoolbox/version.txt
        git commit -m "Update version.txt for ${{ github.event.inputs.milestone_title }}"

    - name: Push release changes
      run: |
        git tag ${{ github.event.inputs.milestone_title }}
        git push --tags

    - name: Create release
      uses: ncipollo/release-action@v1
      id: create_release
      with:
        tag: ${{ github.event.inputs.milestone_title }}
        token: ${{ secrets.GITHUB_TOKEN }}
        bodyFile: ".github/workflows/release-body.md"
        artifacts: "install_sct-${{ github.event.inputs.milestone_title }}_win.bat,\
                    install_sct-${{ github.event.inputs.milestone_title }}_linux.sh,\
                    install_sct-${{ github.event.inputs.milestone_title }}_macos.sh,\
                    sct_apptainer_${{ github.event.inputs.milestone_title }}.tar.gz"
        draft: true

    - name: Update `stable` docs branch to point to new release
      # - We use a manual `stable` branch instead of ReadTheDocs' automated `stable` system.
      # - This allows us to backport simple doc changes (e.g. typo fixes) to our `stable` branch
      #   without having to create any new tags or releases.
      # - When a new release is created, it becomes the new base of the `stable` branch.
      # - NOTE: This will wipe out all the previous backported changes, so make sure to also update `master`
      #   whenever we backport changes (so that they will be preserved when resetting the branch to the release).
      run: |
        git push --force origin refs/tags/"${{ github.event.inputs.milestone_title }}":refs/heads/stable
