name: Check code quality

on: [pull_request]

jobs:
  run_flake8_and_shellcheck_and_checkurl:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetches all references, which is needed to `git diff` with origin/master
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: pip install flake8
    # Note: flake8 picks up project-wide configuration options from 'setup.cfg' in SCT's root directory
    # We set -o pipefail so that the check fails if there's an error with the `git diff` part of the pipeline.
    # We allow (($? == 1)) after grep to allow the empty list as a result (but not (($? == 2)), which would be some other error with grep).
    # We specify --no-run-if-empty so that flake8 doesn't check the whole repo when no .py files got changed.
    - name: Lint Python files with flake8
      run: |
        set -eu -o pipefail
        git diff --name-only --diff-filter=d \
          --merge-base refs/remotes/origin/master -- \
          | (grep '\.py$' || (($? == 1)) ) \
          | xargs --delimiter='\n' --no-run-if-empty flake8

    - name: Check shell scripts with shellcheck
      uses: ludeeus/action-shellcheck@master
      with:
        severity: style

    # There's a daily check for _all_ links in check-broken-links.yml,
    #   so this only checks for links within changed files.
    # Add any file patterns you want ignored to 'check_url_blacklist.txt'
    - name: Check for broken links
      run: |
        # Fail outright if any failure occurs, rather than attempting to proceed
        set -eu -o pipefail

        # Generate list of URLs which exist within files which have changed
        git_diff_urls=$(git diff origin/master... --name-only | 
          xargs grep -Eio '\b(https?)://[-a-z0-9+&@#/%?=~_|$!:,.;]*[a-z0-9+&@#/%=~_|$]' |
          sed 's/:/;/'
        )
                
        # Filter out files which are in the blacklist
        while read l; do
          git_diff_urls=$(grep -v "$l" <<< "$git_diff_urls")
        # This `cat` call MUST be here; otherwise a subshell is created, and recursive variable updating is not possible
        #   Thank you to JN for figuring this out: https://stackoverflow.com/a/16854326
        done <<< $(cat ".github/workflows/check_url_blacklist.txt")
        
        # Check each remaining file in the URL for validity
        xargs -rn 1 ".github/workflows/check-url.sh" <<< "$git_diff_urls"
