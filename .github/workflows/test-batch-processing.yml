name: Test batch_processing.sh

on:
  workflow_dispatch:
  pull_request:
    branches:
      - '*'
  schedule:
    # https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#onschedule
    # > Scheduled workflows run on the latest commit on the default or base branch
    # i.e. this can only run on master
    - cron:  '0 11 * * *'

env:
  # Turns on color output for pytest. See: https://github.com/pytest-dev/pytest/issues/7443#issuecomment-656642591
  PY_COLORS: "1"
  # Disable progress bars for less verbose output
  PIP_PROGRESS_BAR: "off"
  SCT_PROGRESS_BAR: "off"

jobs:
  batch_processing:
    name: Test batch_processing.sh
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04, ubuntu-24.04, macos-13, windows-2022 ]
    runs-on: ${{ matrix.os }}
    # NB: Setting `bash` as the default shell is a bit of a hack workaround for Windows to allow it to run .sh scripts.
    #     Normally, we would ask the user to install a Windows-compatible bash via either Cygwin or Git for Windows.
    #     But, setting `bash` here is the quickest/easiest way to get a cross-OS compatible GHA workflow.
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout SCT
        uses: actions/checkout@v4

      - name: Install SCT (Unix)
        if: runner.os != 'Windows'
        run: ./install_sct -y

      - name: Install SCT (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: install_sct.bat

      - name: Update environment variables
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then

            # NB: I'm not sure what GHA's syntax is for cmd.exe, so we use bash to set the environment variables.
            # In a user install, the user would perform this step using the Windows environment variable changing GUI.
            echo "SCT_DIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
            echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH

          else

            # NB: install_sct edits ~/.bashrc, but those environment changes don't get passed to subsequent steps in GH Actions.
            # So, we filter through the .bashrc and pass the values to $GITHUB_ENV and $GITHUB_PATH.
            # Relevant documentation: https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#environment-files
            # This workaround should be replaced by https://github.com/spinalcordtoolbox/spinalcordtoolbox/pull/3198#discussion_r568225392
            cat ~/.bashrc | grep "export SCT_DIR" | cut -d " " -f 2 >> $GITHUB_ENV
            cat ~/.bashrc | grep "export PATH" | grep -o "/.*" | cut -d ':' -f 1 >> $GITHUB_PATH

          fi

      - name: Check dependencies
        run: sct_check_dependencies

      - name: Run batch_processing.sh
        run: bash batch_processing.sh

      - name: Upload QC results
        uses: actions/upload-artifact@v4
        with:
          name: Batch Processing QC (${{ matrix.os }})
          path: "qc_example_data"

      - name: Validate new results
        run: |
          # Auto-pass macOS as it would fail due to https://github.com/spinalcordtoolbox/spinalcordtoolbox/issues/3194
          if [ "$RUNNER_OS" == "macOS" ]; then
               sct_testing testing/batch_processing/test_batch_processing.py || exit 0
          else
               sct_testing testing/batch_processing/test_batch_processing.py
          fi

      - name: Rename and move folder summaries for easier download
        # When uploading a single artifact, the only way to exclude the parent directory
        # is to move the file to its own folder, then point `path` to that folder.
        # See: # https://github.com/actions/upload-artifact/issues/30#issuecomment-582156316
        if: always()
        run: |
          mkdir jsons
          mv testing/sct_example_data.json jsons/sct_example_data_${{ matrix.os }}.json

      - name: Upload folder summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sct_example_data_${{ matrix.os }}.json
          path: jsons

  compare-results:
    name: Compare cross-platform results
    runs-on: macos-13  # brew is the easiest way to install `jd`
    needs: batch_processing
    env:
      YDIFF_OPTIONS: "--side-by-side --pager=cat --color=always --width=120 --nowrap"
    steps:
      - name: Install `ydiff`  # https://github.com/ymattw/ydiff
        run: brew install ydiff

      - name: Download summaries
        uses: actions/download-artifact@v4
        # See: https://github.com/actions/download-artifact?tab=readme-ov-file#download-all-artifacts
        with:
          path: artifacts
          merge-multiple: true

      - name: Diff summaries (Ubuntu vs macOS)
        continue-on-error: true
        run: diff -u artifacts/sct_example_data_ubuntu-22.04.json artifacts/sct_example_data_macos-13.json | ydiff

      - name: Diff summaries (Ubuntu vs. Windows)
        continue-on-error: true
        run: diff -u artifacts/sct_example_data_ubuntu-22.04.json artifacts/sct_example_data_windows-2022.json | ydiff

      - name: Diff summaries (Ubuntu 22 vs. Ubuntu 24)
        continue-on-error: true
        run: diff -u artifacts/sct_example_data_ubuntu-22.04.json artifacts/sct_example_data_ubuntu-24.04.json | ydiff
