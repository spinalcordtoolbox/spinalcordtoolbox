name: Tests

on:
  workflow_dispatch:
  pull_request:
    branches:
      - '*'
  schedule:
    # https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#onschedule
    # > Scheduled workflows run on the latest commit on the default or base branch
    # i.e. this can only run on master
    - cron:  '0 11 * * *'

# The set of available runners on Github's infra is generous but
# will never be complete: https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
# to cover other other platforms Linux distros, we use docker or WSL images.
# These are therefore not perfectly accurate tests, but hopefully good enough.

# We haven't figured out how to factor this -- to avoid the boilerplate. It seems impossible.
# Github Actions is just not flexible enough. The best it has is the build matrix, but:
# - the bad null case: if the build matrix generates no jobs, the UI prints a placeholder with the unevaluated `name:` expression like `${{matrix.name || matrix.os || 'Nightlies' }}`
# - you cannot refer to the matrix parameters in a job's `if:`, so it is impossible to decide whether to run a job or not; it is possible to do so in a *step*'s `if:`. See https://github.community/t/conditional-matrices/17206/2.
#   ideally we would have a build matrix with all the platforms covered
#   ```
#   if: ${{ !matrix.nightly || (github.event_name == 'schedule') }}
#   ```
#   but it's not allowed; that second half is legal but `matrix.nightly` is not.
# - there's no way to mix the docker-based platforms with the windows ones in the same build matrix anyway, because specifying `container:`, even with an empty/undefined string, tries blindly to use the docker scripts

# To keep feedback fast, we only run a selection of common platforms in CI
# The others run nightly, and on changes to one of the central branches mentioned above in `on:`.

env:
    # Even when given -y, apt will still sometimes hang at a prompt if a package
    # has clarifications to ask; DEBIAN_FRONTEND=noninteractive prevents that,
    # This will be defined for non-debian platforms below too, but there's no harm in that.
    # (TravisCI quietly defined this on all their platforms, but we have to give it manually on GithubCI.)
    DEBIAN_FRONTEND: 'noninteractive'
    # Turns on color output for pytest. See: https://github.com/pytest-dev/pytest/issues/7443#issuecomment-656642591
    PY_COLORS: "1"
    # Disable progress bars for less verbose output
    PIP_PROGRESS_BAR: "off"
    SCT_PROGRESS_BAR: "off"

jobs:

  archlinux:
    name: ArchLinux
    # TODO: when actions supports using ${{env}} in job.*.if and not just job.*.steps.*.if, use this:
    #if: ${{ env.NIGHTLY }}
    # in the meantime, copy-paste this:
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-22.04
    container: archlinux
    steps:
      - name: Dependencies
        run: |  # NB: glu is needed for PyQT testing (https://stackoverflow.com/a/66486957/7584115)
          pacman -Syu --noconfirm gcc git curl glu
      - uses: actions/checkout@v4
      - name: Install SCT
        run: |
          ./.ci.sh -i
      - name: Check dependencies
        run: |
          ./.ci.sh -c
      - name: Run pytest test suite
        run: |
          ./.ci.sh -t

  debian-rolling:
    name: Debian Rolling Release
    # TODO: when actions supports using ${{env}} in job.*.if and not just job.*.steps.*.if, use this:
    #if: ${{ env.NIGHTLY }}
    # in the meantime, copy-paste this:
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-22.04
    container: debian:sid
    steps:
      - name: Dependencies
        run: |  # NB: libgl1-mesa-dev is needed for PyQT testing (https://stackoverflow.com/q/33085297/7584115)
          apt update && apt install -y libglib2.0-0t64 libgl1-mesa-dev procps gcc git curl
      - uses: actions/checkout@v4
      - name: Install SCT
        run: |
          ./.ci.sh -i
      - name: Check dependencies
        run: |
          ./.ci.sh -c
      - name: Run pytest test suite
        run: |
          ./.ci.sh -t

  debian-testing:
    name: Debian Testing
    # TODO: when actions supports using ${{env}} in job.*.if and not just job.*.steps.*.if, use this:
    #if: ${{ env.NIGHTLY }}
    # in the meantime, copy-paste this:
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-22.04
    container: debian:testing
    steps:
      - name: Dependencies
        run: |  # NB: libgl1-mesa-dev is needed for PyQT testing (https://stackoverflow.com/q/33085297/7584115)
          apt update && apt install -y libglib2.0-0 libgl1-mesa-dev procps gcc git curl
      - uses: actions/checkout@v4
      - name: Install SCT
        run: |
          ./.ci.sh -i
      - name: Check dependencies
        run: |
          ./.ci.sh -c
      - name: Run pytest test suite
        run: |
          ./.ci.sh -t

  debian-10:
    name: Debian 10
    # TODO: when actions supports using ${{env}} in job.*.if and not just job.*.steps.*.if, use this:
    #if: ${{ env.NIGHTLY }}
    # in the meantime, copy-paste this:
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-22.04
    container: debian:10
    steps:
      - name: Dependencies
        run: |  # NB: libgl1-mesa-dev is needed for PyQT testing (https://stackoverflow.com/q/33085297/7584115)
          apt update && apt install -y libglib2.0-0 libgl1-mesa-dev procps gcc git curl libgl1-mesa-dev
      - uses: actions/checkout@v4
      - name: Install SCT
        run: |
          ./.ci.sh -i
      - name: Check dependencies
        run: |
          ./.ci.sh -c
      - name: Run pytest test suite
        run: |
          ./.ci.sh -t

  debian-11:
    name: Debian 11
    # TODO: when actions supports using ${{env}} in job.*.if and not just job.*.steps.*.if, use this:
    #if: ${{ env.NIGHTLY }}
    # in the meantime, copy-paste this:
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-22.04
    container: debian:11
    steps:
      - name: Dependencies
        # NB: libgl1-mesa-dev is needed for PyQT testing (https://stackoverflow.com/q/33085297/7584115)
        # NB: We echo "archive.debian.org" to address https://github.com/spinalcordtoolbox/spinalcordtoolbox/issues/4105
        run: |  
          apt update && apt install -y libglib2.0-0 libgl1-mesa-dev procps gcc git curl
      - uses: actions/checkout@v4
      - name: Install SCT
        run: |
          ./.ci.sh -i
      - name: Check dependencies
        run: |
          ./.ci.sh -c
      - name: Run pytest test suite
        run: |
          ./.ci.sh -t

  centos-8:
    name: CentOS Stream 8
    # TODO: when actions supports using ${{env}} in job.*.if and not just job.*.steps.*.if, use this:
    #if: ${{ env.NIGHTLY }}
    # in the meantime, copy-paste this:
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-22.04
    # Stream8 has a 2024 EOL, while CentOS 8 has a 2021 EOL
    # See: https://blog.centos.org/2020/12/future-is-centos-stream/
    # See: https://blog.centos.org/2023/04/end-dates-are-coming-for-centos-stream-8-and-centos-linux-7/
    # After Stream8 hits EOL, we need to use the vault.centos.org mirrorlist to fetch the necessary packages
    container: quay.io/centos/centos:stream8
    steps:
      - name: Dependencies
        run: |  # NB: mesa-libGL is needed for PyQT testing (https://stackoverflow.com/a/65408967/7584115)
          # Sed commands come from https://archive.ph/FS47T
          sed -i -e "s|mirrorlist=|#mirrorlist=|g" /etc/yum.repos.d/CentOS-*
          sed -i -e "s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g" /etc/yum.repos.d/CentOS-*
          yum install -y gcc git curl mesa-libGL
      - uses: actions/checkout@v4
      - name: Install SCT
        run: |
          ./.ci.sh -i
      - name: Check dependencies
        run: |
          ./.ci.sh -c
      - name: Run pytest test suite
        run: |
          ./.ci.sh -t

  centos-9:
    name: CentOS Stream 9
    runs-on: ubuntu-22.04
    container: quay.io/centos/centos:stream9
    steps:
      - name: Dependencies
        run: |  # NB: mesa-libGL is needed for PyQT testing (https://stackoverflow.com/a/65408967/7584115)
          yum install -y gcc git mesa-libGL
      - uses: actions/checkout@v4
      - name: Install SCT
        run: |
          ./.ci.sh -i
      - name: Check dependencies
        run: |
          ./.ci.sh -c
      - name: Run pytest test suite
        run: |
          ./.ci.sh -t

  ubuntu-20_04:
    name: Ubuntu 22.04 (Jammy Jellyfish)
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Install SCT
        run: |
          ./.ci.sh -i
      - name: Check dependencies
        run: |
          ./.ci.sh -c
      - name: Run pytest test suite
        run: |
          ./.ci.sh -t

  ubuntu-22_04:
    name: Ubuntu 24.04 (Noble Numbat)
    # TODO: when actions supports using ${{env}} in job.*.if and not just job.*.steps.*.if, use this:
    #if: ${{ env.NIGHTLY }}
    # in the meantime, copy-paste this:
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-24.04
    steps:
      - name: Dependencies
        run: |
          # github runners come with dev-tools pre-installed
      - uses: actions/checkout@v4
      - name: Install SCT
        run: |
          ./.ci.sh -i
      - name: Check dependencies
        run: |
          ./.ci.sh -c
      - name: Run pytest test suite
        run: |
          ./.ci.sh -t

  macos-13:
   name: macOS 13.0 (Ventura)
   runs-on: macos-13
   steps:
     - uses: actions/checkout@v4
     - name: Install SCT
       run: |
         ./.ci.sh -i
     - name: Check dependencies
       run: |
         ./.ci.sh -c
     - name: Run pytest test suite
       run: |
         ./.ci.sh -t

  macos-14:
    name: macOS 14.0 (Sonoma)
    # TODO: when actions supports using ${{env}} in job.*.if and not just job.*.steps.*.if, use this:
    #if: ${{ env.NIGHTLY }}
    # in the meantime, copy-paste this:
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    runs-on: macos-14
    steps:
      - name: Dependencies
        run: |
          # github runners come with dev-tools pre-installed
      - uses: actions/checkout@v4
      - name: Install SCT
        run: |
          ./.ci.sh -i
      - name: Check dependencies
        run: |
          ./.ci.sh -c
      - name: Run pytest test suite
        run: |
          ./.ci.sh -t

  macos-15:
    name: macOS 15.0 (Sequoia)
    # TODO: when actions supports using ${{env}} in job.*.if and not just job.*.steps.*.if, use this:
    #if: ${{ env.NIGHTLY }}
    # in the meantime, copy-paste this:
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    runs-on: macos-15
    steps:
      - name: Dependencies
        run: |
          # github runners come with dev-tools pre-installed
      - uses: actions/checkout@v4
      - name: Install SCT
        run: |
          ./.ci.sh -i
      - name: Check dependencies
        run: |
          ./.ci.sh -c
      - name: Run pytest test suite
        run: |
          ./.ci.sh -t

  windows-wsl-ubuntu-24_04:
    # with the help of https://github.com/marketplace/actions/setup-wsl
    name: WSL [Ubuntu 24.04]
    # TODO: when actions supports using ${{env}} in job.*.if and not just job.*.steps.*.if, use this:
    #if: ${{ env.NIGHTLY }}
    # in the meantime, copy-paste this:
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    runs-on: windows-2022
    defaults:
      run:
        shell: wsl-bash {0} # https://github.com/marketplace/actions/setup-wsl#default-shell
    steps:
    - uses: Vampire/setup-wsl@v3
      with:
        # other WSL container choices at: https://github.com/marketplace/actions/setup-wsl#distribution
        distribution: Ubuntu-24.04
    - name: Use unix line endings
      shell: bash
      run: |
        # Github's actions/checkout@v4 when run on Windows mangles the line-endings to DOS-style
        # but we're running Linux *on top* of Windows, so we need to not mangle them!
        # https://github.com/actions/checkout/issues/135#issuecomment-602171132
        # https://github.com/actions/virtual-environments/issues/50#issuecomment-663920265
        git config --global core.autocrlf false
        git config --global core.eol lf
    - name: Dependencies
      run: |
        # NB: this one needs sudo, so the global DEBIAN_FRONTEND doesn't get through.
        # NB: mesa-utils is needed for PyQT testing (https://github.com/Microsoft/WSL/issues/1246#issuecomment-356425862)
        sudo apt update && sudo DEBIAN_FRONTEND=noninteractive apt install -y gcc git curl mesa-utils
    - uses: actions/checkout@v4
    - name: Copy SCT from $GITHUB_WORKSPACE to ~
      run: |
        cd ..
        cp -r spinalcordtoolbox ~/spinalcordtoolbox
    # The GITHUB_REF_NAME workaround is necessary because GitHub's "context" environment variables
    # don't seem to propagate to the internal WSL context when using Vampire/setup-wsl.
    # See: https://github.com/spinalcordtoolbox/spinalcordtoolbox/issues/4054#issuecomment-1565115134
    - name: Install SCT
      run: |
        export GITHUB_REF_NAME="${{ github.ref_name }}"
        cd ~/spinalcordtoolbox
        ./.ci.sh -i
    - name: Check dependencies
      run: |
        export GITHUB_REF_NAME="${{ github.ref_name }}"
        cd ~/spinalcordtoolbox
        ./.ci.sh -c
    - name: Run pytest test suite
      run: |
        export GITHUB_REF_NAME="${{ github.ref_name }}"
        cd ~/spinalcordtoolbox
        ./.ci.sh -t

  windows-wsl-ubuntu-22_04:
    # with the help of https://github.com/marketplace/actions/setup-wsl
    name: WSL [Ubuntu 22.04]
    # TODO: when actions supports using ${{env}} in job.*.if and not just job.*.steps.*.if, use this:
    #if: ${{ env.NIGHTLY }}
    # in the meantime, copy-paste this:
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    runs-on: windows-2022
    defaults:
      run:
        shell: wsl-bash {0} # https://github.com/marketplace/actions/setup-wsl#default-shell
    steps:
    - uses: Vampire/setup-wsl@v3
      with:
        # other WSL container choices at: https://github.com/marketplace/actions/setup-wsl#distribution
        distribution: Ubuntu-22.04
    - name: Use unix line endings
      shell: bash
      run: |
        # Github's actions/checkout@v4 when run on Windows mangles the line-endings to DOS-style
        # but we're running Linux *on top* of Windows, so we need to not mangle them!
        # https://github.com/actions/checkout/issues/135#issuecomment-602171132
        # https://github.com/actions/virtual-environments/issues/50#issuecomment-663920265
        git config --global core.autocrlf false
        git config --global core.eol lf
    - name: Dependencies
      run: |
        # NB: this one needs sudo, so the global DEBIAN_FRONTEND doesn't get through.
        # NB: mesa-utils is needed for PyQT testing (https://github.com/Microsoft/WSL/issues/1246#issuecomment-356425862)
        sudo apt update && sudo DEBIAN_FRONTEND=noninteractive apt install -y gcc git curl mesa-utils
    - uses: actions/checkout@v4
    - name: Copy SCT from $GITHUB_WORKSPACE to ~
      run: |
        cd ..
        cp -rp spinalcordtoolbox ~/spinalcordtoolbox
    # The GITHUB_REF_NAME workaround is necessary because GitHub's "context" environment variables
    # don't seem to propagate to the internal WSL context when using Vampire/setup-wsl.
    # See: https://github.com/spinalcordtoolbox/spinalcordtoolbox/issues/4054#issuecomment-1565115134
    - name: Install SCT
      run: |
        export GITHUB_REF_NAME="${{ github.ref_name }}"
        cd ~/spinalcordtoolbox
        ./.ci.sh -i
    - name: Check dependencies
      run: |
        export GITHUB_REF_NAME="${{ github.ref_name }}"
        cd ~/spinalcordtoolbox
        ./.ci.sh -c
    - name: Run pytest test suite
      run: |
        export GITHUB_REF_NAME="${{ github.ref_name }}"
        cd ~/spinalcordtoolbox
        ./.ci.sh -t


  windows-native-2025:
    name: Windows (Native) 2025
    runs-on: windows-2025
    defaults:
      run:
        shell: cmd
    steps:
    - uses: actions/checkout@v4
    - name: Install SCT
      # NB: In real-world usage, it's assumed that the user would download the
      # install_sct.bat file from the Downloads page, and _not_ the full repo.
      # Then, the repo would be cloned to a tmpdir, then copied to the destination folder.
      # However, this only really works on `master`, since for PRs, there is a chance
      # that the PR is coming from a fork. And, in that case, we won't be able to clone
      # the proper branch, as it exists only on the fork.
      run: |
        if "%GITHUB_REF_NAME%"=="master" (
          if not exist %USERPROFILE%\Downloads mkdir %USERPROFILE%\Downloads
          cp install_sct.bat %USERPROFILE%\Downloads
          cd /d %USERPROFILE%\Downloads
        )
        install_sct.bat
    - name: Add SCT to path
      # NB: I'm not sure what GHA's syntax is for cmd.exe, so we use bash just for this one change
      # In a user install, the user would perform this step using the Windows PATH-changing GUI.
      shell: bash
      run: |
        if [ "$GITHUB_REF_NAME" = "master" ]; then
          export SCT_VERSION=$(cat spinalcordtoolbox/version.txt)
          echo "$USERPROFILE\sct_$SCT_VERSION\bin" >> $GITHUB_PATH
        else
          echo "$GITHUB_WORKSPACE\bin" >> $GITHUB_PATH
        fi
    - name: Check dependencies
      run: sct_check_dependencies
    - name: Run pytest test suite
      run: sct_testing


  windows-native-2022:
    name: Windows (Native) 2022
    runs-on: windows-2022
    defaults:
      run:
        shell: cmd
    steps:
    - uses: actions/checkout@v4
    - name: Install SCT
      # NB: In real-world usage, it's assumed that the user would download the
      # install_sct.bat file from the Downloads page, and _not_ the full repo.
      # Then, the repo would be cloned to a tmpdir, then copied to the destination folder.
      # However, this only really works on `master`, since for PRs, there is a chance
      # that the PR is coming from a fork. And, in that case, we won't be able to clone
      # the proper branch, as it exists only on the fork.
      run: |
        if "%GITHUB_REF_NAME%"=="master" (
          if not exist %USERPROFILE%\Downloads mkdir %USERPROFILE%\Downloads
          cp install_sct.bat %USERPROFILE%\Downloads
          cd /d %USERPROFILE%\Downloads
        )
        install_sct.bat
    - name: Add SCT to path
      # NB: I'm not sure what GHA's syntax is for cmd.exe, so we use bash just for this one change
      # In a user install, the user would perform this step using the Windows PATH-changing GUI.
      shell: bash
      run: |
        if [ "$GITHUB_REF_NAME" = "master" ]; then
          export SCT_VERSION=$(cat spinalcordtoolbox/version.txt)
          echo "$USERPROFILE\sct_$SCT_VERSION\bin" >> $GITHUB_PATH
        else
          echo "$GITHUB_WORKSPACE\bin" >> $GITHUB_PATH
        fi
    - name: Check dependencies
      run: sct_check_dependencies
    - name: Run pytest test suite
      run: sct_testing
