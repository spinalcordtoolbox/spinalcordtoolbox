#!/usr/bin/env python
# -*- coding: utf-8
# pytest unit tests for the batch_processing.sh script

import os
import zipfile
import pathlib
import csv

import pytest

from spinalcordtoolbox.utils.sys import sct_dir_local_path


@pytest.fixture()
def old_results_dir(tmp_path):
    """Return a path containing the cached baseline results, extracted to a temp directory."""
    filepath = sct_dir_local_path() / pathlib.Path(os.getenv('BATCH_PROCESSING_ZIP_FILEPATH'))
    assert filepath.suffix == ".zip"
    output_dir = tmp_path / filepath.stem  # Use filename as dirname ('.stem' strips extension)

    if not output_dir.is_dir():
        with zipfile.ZipFile(filepath, 'r') as zip_ref:
            zip_ref.extractall(path=output_dir)

    return output_dir


@pytest.fixture()
def new_results_dir():
    """Return a path to the directory containing the new results generated by batch_processing.sh."""
    output_dir = pathlib.Path(sct_dir_local_path()) / "sct_example_data"
    assert output_dir.is_dir()

    return output_dir


@pytest.mark.skipif(
    not os.getenv('BATCH_PROCESSING_ZIP_FILEPATH'),  # This environment variable should be set by the CI workflow file
    reason="Run only for batch processing CI job"
)
@pytest.mark.parametrize("csv_filepath,row,pos,rel_tolerance",
                         [("t2/csa_c2c3.csv",    -1, 5, 1e-5),
                          ("t2s/csa_gm.csv",     -1, 5, 1e-5),
                          ("t2s/csa_wm.csv",     -1, 5, 1e-5),
                          ("mt/mtr_in_wm.csv",   -1, 7, 1e-5),
                          ("dmri/fa_in_cst.csv", -1, 7, 1e-5),
                          ("dmri/fa_in_cst.csv", -2, 7, 1e-5)])
def test_batch_processing_results(old_results_dir, new_results_dir, csv_filepath, row, pos, rel_tolerance):
    """Ensure that new batch_processing.sh results are within a certain tolerance of the cached baseline results."""
    csv_filepath_old = old_results_dir / csv_filepath
    csv_filepath_new = new_results_dir / csv_filepath
    assert csv_filepath_old.is_file()
    assert csv_filepath_new.is_file()

    with open(csv_filepath_old, newline='') as csvfile:
        reader = csv.reader(csvfile, delimiter=',')
        t2_csa_value_old = [row for row in reader][row][pos]  # Row/position varies depending on metric

    with open(csv_filepath_new, newline='') as csvfile:
        reader = csv.reader(csvfile, delimiter=',')
        t2_csa_value_new = [row for row in reader][row][pos]  # Row/position varies depending on metric

    assert t2_csa_value_new == pytest.approx(t2_csa_value_old, rel=rel_tolerance)
