.. _compute-metrics-section:

Tutorial 3: Computing shape metrics for PAM50-registered data
#############################################################

This section demonstrates how to compute shape metrics of the spinal cord using the ``sct_process_segmentation`` command. Of primary interest is the cross-sectional area (CSA) of the spinal cord, but this command will also calculate other shape metrics, such as diameter, orientation, and symmetry of the cord.

Before starting this tutorial
*****************************

1. Make sure that you have completed the previous tutorial, :ref:`registration-to-template`, before continuing. Output files from that tutorial will be reused here, namely:

   * ``t2_seg.nii.gz`` : The segmented spinal cord image file.
   * ``label/template/`` : The directory containing the registered PAM50 template files.

2. Navigate to the ``sct_course_london20/single_subject/data/t2/`` directory in a terminal window, and ensure that the files mentioned above are present.

----------

Computing CSA
*************

.. figure:: https://raw.githubusercontent.com/spinalcordtoolbox/doc-figures/master/registration_to_template/csa.png
  :align: center
  :figwidth: 60%

CSA Averaged across vertebral levels
====================================

First, we compute the cord cross-sectional area (CSA) and average it between C3 and C4 vertebral levels.

.. code:: sh

   sct_process_segmentation -i t2_seg.nii.gz -vert 3:4 -vertfile ./label/template/PAM50_levels.nii.gz -o csa_c3c4.csv

:Input arguments:
   - ``-i`` : The input segmentation file.
   - ``-vert`` : The vertebral levels to compute metrics across. Vertebral levels can be specified individually (``3,4``) or as a range (``3:4``).
   - ``-vertfile`` : The label file that specifies vertebral levels. Here, we use the PAM50 template object that had been previosuly warped to the same coordinate space as the T2 segmentation.
   - ``-o`` : The output CSV file.

:Output files/folders:
   - ``csa_c3c4.csv`` : A file containing the CSA values and other shape metrics. This file is partially replicated in the table below.

.. csv-table:: CSA values computed for C3 and C4 vertebral levels (Averaged)
   :file: csa_c3c4.csv
   :widths: 14, 9, 13, 8, 7, 7, 7, 8, 7, 8, 7
   :header-rows: 1

Per-level CSA
=============

Next, we will compute CSA for each individual vertebral level (rather than averaging).

.. code:: sh

   sct_process_segmentation -i t2_seg.nii.gz -vert 3:4 -vertfile ./label/template/PAM50_levels.nii.gz -perlevel 1 -o csa_perlevel.csv

:Input arguments:
   - ``-i`` : The input segmentation file.
   - ``-vert`` : The vertebral levels to compute metrics across. Vertebral levels can be specified individually (``3,4``) or as a range (``3:4``).
   - ``-vertfile`` : The label file that specifies vertebral levels. Here, we use the PAM50 template object that had been previosuly warped to the same coordinate space as the T2 segmentation.
   - ``-perlevel`` : Set this option to 1 to turn on per-level computation.
   - ``-o`` : The output CSV file.

:Output files/folders:
   - ``csa_perlevel.csv`` : A file containing the CSA values and other shape metrics. This file is partially replicated in the table below.

.. csv-table:: CSA values computed for C3 and C4 vertebral levels
   :file: csa_perlevel.csv
   :widths: 15, 9, 14, 8, 7, 7, 7, 7, 7, 7, 7
   :header-rows: 1

Per-slice CSA
=============

Finally, to compute CSA for individual slices, set the ``-perslice`` argument to 1, combined with the ``-z`` argument to specify slice numbers (or a range of slices).

.. code:: sh

   sct_process_segmentation -i t2_seg.nii.gz -perslice 1 -z 30:35 -o csa_perslice.csv

:Input arguments:
   - ``-i`` : The input segmentation file.
   - ``-perslice`` : Set this option to 1 to turn on per-slice computation.
   - ``-z`` : The Z-axis slices to compute metrics for. Slices can be specified individually (``30,31,32,33,34,35``) or as a range (``30:35``).
   - ``-o`` : The output CSV file.

:Output files/folders:
   - ``csa_perslice.csv`` : A file containing the CSA values and other shape metrics. This file is partially replicated in the table below.


.. csv-table:: CSA values across slices 30 to 35
   :file: csa_perslice.csv
   :widths: 13, 9, 12, 8, 7, 7, 7, 9, 7, 9, 7
   :header-rows: 1

----------

Analysis of the spinal cord shape
*********************************

The csv files generated by ``sct_process_segmentation`` also include metrics to analyse the shape of the spinal cord in the axial plane, such as ellipticity, antero-posterior and right-left dimensions. These are of particular interest for studying cord compression. See `Martin et al. BMJ Open 2018 <https://bmjopen.bmj.com/content/8/4/e019809>`_ for an example application in degenerative cervical myelopathy.

.. figure:: https://raw.githubusercontent.com/spinalcordtoolbox/doc-figures/master/registration_to_template/sct_process_segmentation-shape-metrics.png
   :align: center
   :figwidth: 60%

   Additional shape metrics computed by ``sct_process_segmentation``.

----------

Verifying the correctness of the metrics
****************************************

You may have noticed that the csv files generated by ``sct_process_segmentation`` also include the angles between the cord centerline and the normal to the axial plane. Angle_AP corresponds to the angle about the AP axis, while angle_RL corresponds to the angle about the RL axis. These angles are used to correct for the tilt of the spinal cord relative to the superior-inferior axis. Therefore, if you obtain inconsistent CSA values, it is a good habit to verify that the values of these angles are reasonable.

.. figure:: https://raw.githubusercontent.com/spinalcordtoolbox/doc-figures/master/registration_to_template/csa-angles.png
   :align: center
   :figwidth: 50%

   Visualization of CSA, as well as the angles (AP, RL) used to compute the CSA.

----------

Next: Including additional images in your analysis (e.g., diffusion or magnetization transfer data)
***************************************************************************************************

The next tutorials will cover how to take additional images that were acquired during the same session and include them in your analysis.

* :ref:`registering-multiple-images`
* :ref:`computing-mtr-for-coregistered-mt-images`