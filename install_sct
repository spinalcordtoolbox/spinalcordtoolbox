#!/usr/bin/env bash
# USAGE
# > ./install_sct
#
# This is the spinalcord toolbox (SCT) installer
# It downloads the Conda (http://conda.pydata.org/) version
# of python and install the SCT requirements over it
#
# The SCT can be install in place where you download it. But then do
# not delete the source code or you will delete the installation too!
#
# If you run the installer as super user, the default install is /opt,
# if you choose this option or any other directory other than the
# source location, you can get rid of the source code after the
# installation is successful.
#
#########################################################################################
# Copyright (c) 2016 Polytechnique Montreal <www.neuro.polymtl.ca>
# Author: PO Quirion
# License: see the file LICENSE.TXT
#########################################################################################

# N.B. to generate and compress binaries, go to binary folder and type: tar -czf sct_binaries.tar.gz isct_*

# TODO add some doc to the installer
# TODO: remove python folder if not empty

# functions
# ========================================================================
# Where tmp file are stored
TMP_DIR=`mktemp -d 2>/dev/null || mktemp -d -t 'TMP_DIR'`
# Start Directory So we go back there at the end of the Script
SCT_SOURCE=$PWD

SCRIPT_DIR="scripts"
DATA_DIR="data"
PYTHON_DIR="python"
BIN_DIR="bin"
STATS_DSN="https://www.neuro.polymtl.ca/_media/downloads/stats_dsn.txt"

# Force a clean exit
finish ()
{
    # Catch the last return code
    value=$?
    # Get back to starting point
    cd ${SCT_SOURCE}
    if [ ${value} -eq 0 ]; then
        echo "Installation finished successfully"
    else
        echo "Installation failed"
    fi
    # clean tmp_dir
    rm -r ${TMP_DIR}
    exit ${value}
}
trap finish EXIT

# Force bashrc loading
force_bashrc_loading ()
{
  sourceblock="
if [ -n \"\$BASH_VERSION\" ]; then
    # include .bashrc if it exists
    if [ -f \"\$HOME/.bashrc\" ]; then
    . \"\$HOME/.bashrc\"
    fi
fi"
  for profiles in  ~/.bash_profile ~/.bash_login ~/.profile ; do
    if [[ -a $profiles ]] ; then
       if ! grep -E "(\.|source) .*bashrc" ${profiles} > /dev/null 2>&1 ; then
         echo "${sourceblock}" >> ${profiles}
       fi
       bidon=0
       break
    fi
  done

  if [ -z ${bidon} ] ; then
    echo "${sourceblock}" >> ~/.bash_profile
  fi
}

# Installation text to insert in .bashrc
install_refresh ()
{

  if [[ -z ${THE_CSHRC} ]]  ; then
    echo
    echo "" >> ${THE_BASHRC}
    echo "# SPINALCORDTOOLBOX (installed on $(date +%Y-%m-%d\ %H:%M:%S))" >> ${THE_BASHRC}
    echo "export PATH=${SCT_DIR}/${BIN_DIR}:\$PATH" >> ${THE_BASHRC}
    echo "source ${SCT_DIR}/${BIN_DIR}/sct_env" >> ${THE_BASHRC}
    echo "" >> ${THE_BASHRC}
  else
    # (t)csh for good measure
    echo "" >> ${THE_CSHRC}
    echo "# SPINALCORDTOOLBOX" >> ${THE_CSHRC}
    echo "setenv PATH \"\${PATH}:${SCT_DIR}/${BIN_DIR}\"" >> ${THE_CSHRC}
    echo "source ${SCT_DIR}/${BIN_DIR}/sct_env" >> ${THE_CSHRC}
    echo "" >> ${THE_CSHRC}
  fi
}


# Download from URL using curl/wget
download ()
{
  # Use curl or wget to download goodies
    e_status=0

    hash "wget" 2> /dev/null
    is_wget=$?
    hash "curl" 2> /dev/null
    is_curl=$?

    if [[ ${is_wget} -eq 0 ]] ; then
        wget -O $1 $2
        e_status=$?
        echo exit status is ${e_status}
    fi

    if [[ ${is_curl} -eq 0 && ! -e $1 ]] ; then
        curl -o $1 -L $2
        e_status=$?
        echo exit status is ${e_status}
    fi

    if [[ ${is_curl} -ne 0 && ${is_wget} -ne 0 ]] ; then
        echo You need to install "curl" OR "wget" before you can install the SPINALCORDTOOLBOX
        echo run
        echo "   > sudo apt-get install wget"
        echo and rerun the installer
        exit 1
    fi

    if [[ ${e_status} -ne 0  || ! -e $1 ]]; then
        echo "The download of $2 failed"
        echo "Please check your internet connection before relaunching the installer"
        exit 1
    fi
}


# Usage of this script
usage()
{
  echo -e "\nUsage: $0 [-d ] [-m ] [-b] [--mpi]" 1>&2;
  echo -e "\nOPTION"
  echo -e "\t-d \v Prevent the (re)-installation of the \"data/\" directory "
  echo -e "\n\t-m \v Prevent the (re)-installation of the \"python/\" directory "
  echo -e "\n\t-b \v Prevent the (re)-installation of the SCT binaries files "
  echo -e "\n\t--mpi,-p \v Will use the MPI interface to run pipelines (Linux support only)"
}


# SCRIPT STARTS HERE
# ========================================================================
echo -e "\nWelcome to the SCT installer!"

# Transform  long option "--long" into short option  "-l"
for arg in "$@"; do
  shift
  case "$arg" in
    "--mpi") set -- "$@" "-p" ;;
    *)       set -- "$@" "$arg"
  esac
done



while getopts ":dmhbpz" opt; do
  case $opt in
    d)
      echo " data directory will not be (re)-installed"
      NO_DATA_INSTALL=yes
      ;;
    m)
      echo " miniconda python will not be (re)-installed "
      NO_CONDA_INSTALL=yes
      ;;
    b)
      echo " SCT binaries will not be (re)-installed "
      NO_SCT_BIN_INSTALL=yes
      ;;
    p)
      echo " Multiprocessing using MPI activated"
      export SCT_MPI_MODE=yes
      ;;
    h)
      usage
      exit 0
      ;;
    \?)
      usage
      exit 1
      ;;
  esac
done


if [ "x${SCT_VERBOSE_INSTALL}" == "x1" ]; then
  set -x
fi


# Catch SCT version
if [ -e "version.txt" ]; then
  SCT_VERSION=`cat version.txt`
  if [ ${SCT_MPI_MODE} ]; then
    SCT_VERSION=${SCT_VERSION}_mpi
  fi
else
  echo "ERROR: version.txt not found."
  echo "The install_sct script must be execute from the source directory"
  exit 1
fi

# Get installation type (from git or from package)
if [ "x${SCT_INSTALL_TYPE}" == "x" ]; then
  if [ -d ".git" ]; then
    # folder .git exist, therefore it is a git installation
    SCT_INSTALL_TYPE="in-place"
  else
    SCT_INSTALL_TYPE="package"
  fi
fi

if [ "x${SCT_MINICONDA}" == "x" ]; then
  SCT_MINICONDA=2
fi


# Fetch OS type
if uname -a | grep -i  darwin > /dev/null 2>&1; then
  # OSX

  # Fix for non-English Unicode systems on MAC
  if [ -z ${LC_ALL} ]; then
    export LC_ALL=en_US.UTF-8
  fi

  if [ -z ${LANG} ]; then
    export LANG=en_US.UTF-8
  fi

  OS=osx
  force_bashrc_loading
elif uname -a | grep -i  linux > /dev/null 2>&1; then
  if cat /etc/issue | grep -i centos | grep 6. 2>&1; then
    # CentOS 6.X
    OS=linux_centos6
  elif cat /etc/issue | grep -i Red | grep 6. 2>&1; then
    # RedHat 6.X
    OS=linux_centos6
  else
    # Other Linux
    OS=linux
  fi
else
  echo Sorry, the installer only supports Linux and OSX, quitting installer
  exit 1
fi

#echo -e "\nInstallation info:"
echo -e "\nSCT version ......... "$SCT_VERSION
echo -e "Installation type ... "$SCT_INSTALL_TYPE
echo -e "Operating system .... "$OS
# Check if sudo
if [[ $UID == 0 ]]; then
  echo -e "sudo mode ........... 1"
else
  echo -e "sudo mode ........... 0"
fi

# If you do not want the crash reports question to be ask,
# set ASK_REPORT_QUESTION at installation time like this:
# >>> ASK_REPORT_QUESTION=false ./install_sct
REPORT_STATS=no
if [[ ! ${ASK_REPORT_QUESTION} =~ ^([[Ff]alse?|[Nn]o?)$  ]]; then
  # Send crash statistic and error logs to developers, that is the
  # Questions
  echo
  cat <<EOF
To improve user experience and fix bugs, the SCT development team is using a
report system to automatically receive crash reports and errors from users.
These reports are anonymous.
EOF
  read -p 'Do you agree to help us improve SCT? [y]es/[n]o: ' -r REPORT_STATS
fi

if [[ ${REPORT_STATS} =~ [Yy](es)? ]]; then
  REPORT_STATS=yes
  echo "--> Crash reports will be sent to the SCT development team. Thank you!"
else
  unset REPORT_STATS
  echo "--> Crash reports will not be sent."
fi

# Define sh files
if echo $(ps -o comm= $PPID) | grep csh ;then
  THE_CSHRC=${HOME}/.cshrc
  THE_RC=${THE_CSHRC}
else
  THE_BASHRC=${HOME}/.bashrc
  THE_RC=${THE_BASHRC}
fi

# if installing from git folder, then becomes default installation folder
if [[ "${SCT_INSTALL_TYPE}" == "in-place" ]]; then
  INSTALL_DIR=$SCT_SOURCE
else
  INSTALL_DIR="${HOME}/sct_${SCT_VERSION}"
fi

# Set install dir
while true; do
  echo -e "\nSCT will be installed here: [${INSTALL_DIR}]"
  while  [[ ! ${change_default_path} =~ ^([Yy](es)?|[Nn]o?)$ ]] ; do
    echo -n "Do you agree? [y]es/[n]o: "
    read change_default_path
  done
  if [[ ${change_default_path} =~ ^[Yy] ]]; then
    # user accepts default path --> exit loop
    break
  fi
  echo -n "Choose install directory. Warning! Give full path (e.g. /usr/django/sct_v3.0): "
  # user enters new path
  read new_install

  # Expand ~/
  new_install=${new_install/#\~\//$HOME\/}
  # Remove trailing /
  new_install=${new_install%/}

  # Avoid horrible bug, like removing /bin if SCT_DIR "/" or $HOME/bin
  if [ "${new_install}" == "/" ] || [ "${HOME}" == "${new_install%/}" ] ; then
    echo Cannot be installed directly in ${new_install}
    echo Please pick a full path
    continue
  elif [ -d "${new_install}" ]; then
    # directory exists --> update INSTALL_DIR and exit loop
    echo -e "WARNING: Directory already exists. Files will be overwritten."
    INSTALL_DIR=${new_install}
    break
  elif [ ! "${new_install}" ]; then
    # If no input, asking again, and again, and again
    continue
  else
    INSTALL_DIR=${new_install}
    break
  fi
done

# Create directory
mkdir -p ${INSTALL_DIR}
# check if directory was created
if [ -d "${INSTALL_DIR}" ]; then
  # check write permission
  if [ ! -w "${INSTALL_DIR}" ]; then
    echo "ERROR: ${INSTALL_DIR} exists but does not have write permission."
    exit 1
  fi
else
  echo "ERROR: ${INSTALL_DIR} cannot be created. Make sure you have write permission."
  exit 1
fi
SCT_DIR=${INSTALL_DIR}

# Copy files to destination directory
if [ "${SCT_DIR}" != "${SCT_SOURCE}" ]; then
  echo -e "\nCopying source files from ${SCT_SOURCE} to ${SCT_DIR}"
  cp -vR ${SCT_INSTALL_CP_OPTIONS} "${SCT_SOURCE}/"*  "${SCT_DIR}/" | while read line; do echo -n "."; done

else
  echo -e "\nSkipping copy of source files (source and destination folders are the same)"
fi

# Clean old install setup in bin/ if existing
if [ -x ${SCT_DIR}/${BIN_DIR} ]; then
  echo -e "\nRemoving sct and isct softlink from ${SCT_DIR}/${BIN_DIR}"
  find ${SCT_DIR}/${BIN_DIR} -type l -name "sct_*" -exec rm {} \;
  find ${SCT_DIR}/${BIN_DIR} -type l -name "isct_*" -exec rm {} \;
fi

# Go to installation folder
cd ${SCT_DIR}

# Make sure we are in SCT folder (to avoid deleting folder from user)
if [ ! -f "version.txt" ]; then
  echo -e "\nERROR: Cannot cd into SCT folder. SCT_DIR="$SCT_DIR
  exit 1
fi

## Create launchers for Python scripts

export SCT_ADD_ENV_VARS
# add env vars to set in sct_laucher here SCT_ADD_ENV_VARS can have many lines
if [ ${REPORT_STATS} ]; then
  download "${TMP_DIR}/stats_dsn.txt" "$STATS_DSN"
  SCT_ADD_ENV_VARS="export SENTRY_DSN=$(cat ${TMP_DIR}/stats_dsn.txt)"
fi
echo -e "\nCreating launchers for Python scripts..."
cmd="install/update_bin.sh ${SCT_SOURCE} ${SCT_DIR}"; echo ">> "$cmd; $cmd
res=$?
if [[ $res != 0 ]]; then
  echo "\nProblem creating launchers!"
  exit $res
fi

## INSTALL PYTHON
# We make sure that there is no conflict with local python install by unsetting PYTHONPATH
# and forcing PYTHONNOUSERSITE
unset PYTHONPATH
export PYTHONNOUSERSITE=1

if [ ${NO_CONDA_INSTALL} ]; then
  echo "python/ will not be (re)-install"
  # activate miniconda
  cmd=". ${SCT_DIR}/${PYTHON_DIR}/bin/activate ${SCT_DIR}/${PYTHON_DIR}"; echo ">> "$cmd; $cmd
else
  # Install Python conda
  echo -e "\nInstalling conda..."
  cmd="rm -rf ${SCT_DIR}/${PYTHON_DIR}"; echo ">> "$cmd; $cmd
  cmd="mkdir -p ${SCT_DIR}/${PYTHON_DIR}"; echo ">> "$cmd; $cmd
  # downloading

  if [ $SCT_MINICONDA == "2" ]; then
    case $OS in
      linux*)
      download ${TMP_DIR}/miniconda.sh https://repo.continuum.io/miniconda/Miniconda2-4.1.11-Linux-x86_64.sh
      ;;
      osx)
      download ${TMP_DIR}/miniconda.sh https://repo.continuum.io/miniconda/Miniconda2-4.1.11-MacOSX-x86_64.sh
      ;;
    esac
  elif [ $SCT_MINICONDA == "3" ]; then
    case $OS in
      linux*)
      download ${TMP_DIR}/miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
      ;;
      osx)
      download ${TMP_DIR}/miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh
      ;;
    esac
  else
      download ${TMP_DIR}/miniconda.sh "$SCT_MINICONDA"
  fi

  # run conda installer
  cmd="bash ${TMP_DIR}/miniconda.sh -p ${SCT_DIR}/${PYTHON_DIR} -b -f"; echo ">> "$cmd; $cmd
  ret_code_conda=$?
  if [[ $ret_code_conda != 0 ]]; then
    echo -e Conda did not installed properly with return code $ret_code_conda
    exit $ret_code_conda
  else
    echo -e Conda installation successful
  fi

  # activate miniconda
  cmd=". ${SCT_DIR}/${PYTHON_DIR}/bin/activate ${SCT_DIR}/${PYTHON_DIR}"; echo ">> "$cmd; $cmd

  # Install Python dependencies
  echo -e "\nInstalling Python dependencies..."

  if [ "$SCT_MINICONDA" == "3" ]; then
    echo "Working around dipy setup.py issue on py3k by installing numpy"
    conda install -fy numpy
  fi

  if [ "$SCT_MINICONDA" == "3" ]; then
    specs=$(< ${SCT_SOURCE}/install/requirements/requirementsConda.txt)
    e_status=0
    for spec in $specs; do
      conda install -c defaults --yes "$spec" || e_status=1
    done
    e_status=0 # Temporary until everything in there has been fixed
  else
    conda install -c defaults --yes --file ${SCT_SOURCE}/install/requirements/requirementsConda.txt
    e_status=$?
  fi
  if [ ${e_status} != 0 ] ; then
    echo "conda install error with exit status $e_status. Check logs for more details
            and verify your internet connection before reinstalling"
    exit $e_status
  fi

  if [[ ${SCT_MPI_MODE} ]] ; then
    echo "Installing MPI libraries for HCP installation"
      conda install -c conda-forge --yes --file ${SCT_SOURCE}/install/requirements/requirementsMPI.txt
  fi

  # Workaround for #1549 (install pip 10 pre-release if not already here)
  if python -c 'import pip; int(pip.__version__.split(".")[0]) >= 10' | grep -q False; then
    echo "Retrieving a recent pip to make installation faster"
    pip install https://github.com/pypa/pip/archive/72f219c410b0ce25f7da44be6172c1e3766bbe6b.zip
  fi

  if [ "$SCT_MINICONDA" == "3" ]; then
    pip install  -r ${SCT_SOURCE}/install/requirements/requirementsPip3-1.txt
    e_status=$?
    pip install  -r ${SCT_SOURCE}/install/requirements/requirementsPip3-2.txt
    e_status=$?
  else
    pip install  -r ${SCT_SOURCE}/install/requirements/requirementsPip.txt
    e_status=$?
  fi
  if [ ${e_status} != 0 ]; then
    echo "pip install error with exit status $e_status. Check logs for more details
            and verify your internet connection before reinstalling"
    exit $e_status
  fi

  python ${SCT_SOURCE}/install/install_dependencies_with_workarounds.py
  e_status=$?
  if [ ${e_status} != 0 ]; then
      echo "Working around distribution issues failed."
      echo "Feel free to open an issue after looking at https://github.com/neuropoly/spinalcordtoolbox/issues/1704"
      exit $e_status
  fi
fi

## Install the spinalcordtoolbox into the Conda venv
pip install -e ${SCT_DIR}
e_status=$?
if [ ${e_status} != 0 ]; then
  echo "Failed to pip install sct, which is quite unexpected."
  exit ${e_status}
fi

## Install binaries
if [ ${NO_SCT_BIN_INSTALL} ]; then
    echo "SCT binaries will not be (re)-installed"
else
  echo -e "\nInstalling binaries..."
  cmd=". ${SCT_DIR}/${PYTHON_DIR}/bin/activate ${SCT_DIR}/${PYTHON_DIR}"; echo ">> "$cmd; $cmd
  if [ $OS == "linux" ]; then
    cmd="python scripts/sct_download_data.py -d binaries_debian -o ${SCT_DIR}/${BIN_DIR}"; echo ">> "$cmd; $cmd
    e_status=$?
  elif [ $OS == "linux_centos6" ]; then
    cmd="python scripts/sct_download_data.py -d binaries_centos -o ${SCT_DIR}/${BIN_DIR}"; echo ">> "$cmd; $cmd
    e_status=$?
  elif [ $OS == "osx" ]; then
    cmd="python scripts/sct_download_data.py -d binaries_osx -o ${SCT_DIR}/${BIN_DIR}"; echo ">> "$cmd; $cmd
    e_status=$?
  else
    echo "Unsupported OS $OS: can't install binaries."
    exit 1
  fi
  if [ ${e_status} != 0 ]; then
    echo "Failed to download SCT binaries."
    exit ${e_status}
  fi
fi


echo -e "All requirements installed!"


# INSTALL DATA
if [ ${NO_DATA_INSTALL} ]; then
  echo "data/ will not be (re)-install"
else
  # forcing activation if python is not reinstalled
  cmd=". ${SCT_DIR}/${PYTHON_DIR}/bin/activate ${SCT_DIR}/${PYTHON_DIR}"; echo ">> "$cmd; $cmd

  # Download data
  echo -e "\nInstalling data..."
  cmd="rm -rf ${SCT_DIR}/${DATA_DIR}"; echo ">> "$cmd; $cmd
  cmd="mkdir -p ${SCT_DIR}/${DATA_DIR}"; echo ">> "$cmd; $cmd
  cmd="cd ${SCT_DIR}/${DATA_DIR}"; echo ">> "$cmd; $cmd
  for data in PAM50 gm_model optic_models pmj_models deepseg_sc_models deepseg_gm_models deepseg_lesion_models c2c3_disc_models; do
    cmd="python ../scripts/sct_download_data.py -d ${data}"; echo ">> "$cmd; $cmd
    e_status=$?
    if [ ${e_status} != 0 ]; then
      echo "Failed to download SCT binaries."
      exit ${e_status}
    fi
  done
fi

# Make sure sct scripts are executable
find ${SCT_DIR}/${BIN_DIR}/ -maxdepth 1 -type f -exec chmod 755 {} \;

# make sure there is no buffer/cache issue for the ${BIN_DIR} directory
ls -l ${SCT_DIR}/${BIN_DIR}/ > /dev/null 2>&1;

# Deactivating conda
. ${SCT_DIR}/${PYTHON_DIR}/bin/deactivate > /dev/null 2>&1

# if sudo=0
if [[ $UID != 0 ]]; then
  # update PATH environment
  while  [[ ! ${add_to_path} =~ ^([Yy](es)?|[Nn]o?)$ ]] ; do
    echo -e -n "\nDo you want to add the sct_* scripts to your PATH environment? [y]es/[n]o: "
    read add_to_path
  done
  echo ""
  if [[ ${add_to_path} =~ ^[Yy] ]]; then
    install_refresh
  else
     echo Not adding ${INSTALL_DIR} to \$PATH
     echo You can always add it later or call SCT functions with full path ${SCT_DIR}/${BIN_DIR}/sct_function
  fi
  # run sct_check_dependencies
  echo -e "\nValidate installation..."
  # We run the sct_check_dependencies in the TMP_DIR so the tmp.XXX output
  # it creates is cleaned properly
  cd ${TMP_DIR}
  if ${SCT_DIR}/${BIN_DIR}/sct_check_dependencies; then
    if [[ ${add_to_path} =~ ^[Nn] ]]; then
      echo -e "To use SCT now, please update your environment variable by running:\n"
      echo -e "export PATH=${SCT_DIR}/${BIN_DIR}:$PATH\n"
      echo -e "source ${SCT_DIR}/${BIN_DIR}/sct_env\n"
    else
      echo -e "Open a new Terminal window to load environment variables, or run:\n source ${THE_RC}\n"
    fi
  else
    echo -e "Installation validation NG!"
    echo -e "Please copy the historic of this Terminal (starting with the command install_sct) and paste it in the SCT Help forum under a new ticket:"
    echo -e "https://sourceforge.net/p/spinalcordtoolbox/discussion/help/\n"
    exit 1
  fi
else
  # if sudo=1
  echo -e "\nWARNING: sudo mode: Profile file was not edited. To complete installation, please add the following line to the appropriate file (e.g., .bashrc):"
  echo -e "export PATH=${SCT_DIR}/${BIN_DIR}:\$PATH"
  echo -e "Then, please open a new Terminal and run sct_check_dependencies to make sure SCT is properly installed.\n"
fi
