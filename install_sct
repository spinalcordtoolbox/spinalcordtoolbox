#!/bin/bash
# USAGE
#   ./install_sct
#   yes | ./install_sct   # will install without interruption with 'yes' as default answer
#
# This is the spinalcord toolbox (SCT) installer
# It downloads the Conda (http://conda.pydata.org/) version
# of python and installs the SCT requirements over it
#
# The SCT can be installed in the location where you download it. If you choose to do so,
# do not delete the source code or you will delete the installation too!
#
# If you run the installer as super user, the default install is /opt,
# if you choose this option or any other directory other than the
# source location, you can get rid of the source code after the
# installation is successful.
#
#########################################################################################
# Copyright (c) 2019 Polytechnique Montreal <www.neuro.polymtl.ca>
# Authors: PO Quirion, J Cohen-Adad, J Carretero
# License: see the file LICENSE.TXT
#########################################################################################

# N.B. to generate and compress binaries, go to binary folder and type: tar -czf sct_binaries.tar.gz isct_*

#set -e  # v: verbose, e: exit if non-zero output is encountered. Using set -e will exit even when trying to remove
# a folder that already exists, therefore, it should only be used for debugging mode.
# TODO add some doc to the installer
# TODO: remove python folder if not empty

# functions
# ========================================================================
# Where tmp file are stored
TMP_DIR=$(mktemp -d 2>/dev/null || mktemp -d -t 'TMP_DIR')
# Start Directory So we go back there at the end of the Script
SCT_SOURCE=$PWD

SCRIPT_DIR="scripts"
DATA_DIR="data"
PYTHON_DIR="python"
BIN_DIR="bin"

function die() {
  echo -e "\n\033[0;31m$1\033[0m\n"
  exit 1
}

function check_requirements() {

  if [[ ! $(which curl) && ! $(which wget) ]]; then
    die "Install \"curl\" OR \"wget\" before you can install the SPINALCORDTOOLBOX"
  fi

  if [[ ! $(which git) ]]; then
    die "You need to install \"git\" before you can install the SPINALCORDTOOLBOX \n
for installation instructions check: https://git-scm.com/book/en/v2/Getting-Started-Installing-Git
"
  fi

}

# Force a clean exit
function finish() {
  # Catch the last return code
  value=$?
  # Get back to starting point
  cd $SCT_SOURCE
  if [[ $value -eq 0 ]]; then
    echo -e "Installation finished successfully\n"
  elif [[ $value -eq 99 ]]; then
    # Showing usage with -h
    echo ""
  else
    echo -e "Installation failed\n"
  fi
  # clean tmp_dir
  rm -r $TMP_DIR
  exit $value
}
trap finish EXIT

# Force bashrc loading
function force_bashrc_loading() {
  sourceblock="
if [[ -n \"\$BASH_VERSION\" ]]; then
    # include .bashrc if it exists
    if [[ -f \"\$HOME/.bashrc\" ]]; then
    . \"\$HOME/.bashrc\"
    fi
fi"
  for profiles in ~/.bash_profile ~/.bash_login ~/.profile; do
    if [[ -a $profiles ]]; then
      if ! grep -E "(\.|source) .*bashrc" $profiles >/dev/null 2>&1; then
        echo "$sourceblock" >>$profiles
      fi
      bidon=0
      break
    fi
  done

  if [[ -z $bidon ]]; then
    echo "$sourceblock" >>~/.bash_profile
  fi
}

# Installation text to insert in .bashrc
function edit_bashrc() {
  if [[ -z $THE_CSHRC ]]; then
    echo
    echo "" >>$THE_BASHRC
    echo "# SPINALCORDTOOLBOX (installed on $(date +%Y-%m-%d\ %H:%M:%S))" >>$THE_BASHRC
    echo $DISPLAY_UPDATE_PATH >>$THE_BASHRC
    echo "export SCT_DIR=$SCT_DIR" >>$THE_BASHRC
    echo "export MPLBACKEND=Agg" >>$THE_BASHRC
    echo "" >>$THE_BASHRC
  else
    # (t)csh for good measure
    echo
    echo "" >>$THE_CSHRC
    echo "# SPINALCORDTOOLBOX (installed on $(date +%Y-%m-%d\ %H:%M:%S))" >>$THE_CSHRC
    echo $DISPLAY_UPDATE_PATH >>$THE_CSHRC
    echo "setenv SCT_DIR $SCT_DIR" >>$THE_CSHRC
    echo "setenv MPLBACKEND Agg" >>$THE_CSHRC
    echo "" >>$THE_CSHRC
  fi
}

# Download from URL using curl/wget
function download() {
  # Use curl or wget to download goodies
  e_status=0

  if [[ $(which wget) ]]; then
    cmd="wget -O $1 $2"
    echo ">> "$cmd
    $cmd
    e_status=$?
    echo exit status is $e_status
  fi

  if [[ $(which curl) && ! -e $1 ]]; then
    cmd="curl -o $1 -L $2"
    echo ">> "$cmd
    $cmd
    e_status=$?

    echo exit status is $e_status
  fi

  if [[ $e_status -ne 0 || ! -e $1 ]]; then
    die "The download of $2 failed\n
Please check your internet connection before relaunching the installer\n"
  fi
}

# SCRIPT STARTS HERE
# ========================================================================
ARGPARSE_ALLOW_UNKNOWN_ARGS=true # tell argparse to allow unknown args
source scripts/argparse.bash
argparse "$@" <<EOF || exit 1
parser.add_argument('-d', '--no-data-install', action='store_true', help='-d \v Prevent the (re)-installation of the \"data/\" directory')
parser.add_argument('-b', '--no-sct-bin-install', action='store_true', help='-b \v Prevent the (re)-installation of the SCT binaries files')
parser.add_argument('-v', '--verbose', action='store_true', help='\n\t-v \v Full verbose')
EOF

if [[ $UNKNOWN_ARGS ]]; then
    sh install_sct -h
    die "Argument not valid"
fi

if [[ $VERBOSE ]]; then
    set -x
fi

echo -e "\nWelcome to the SCT installer!"

check_requirements

# Transform  long option "--long" into short option  "-l"
for arg in "$@"; do
  shift
  case "$arg" in
    *)       set -- "$@" "$arg"
  esac
done

# Catch SCT version
if [[ -e "version.txt" ]]; then
  SCT_VERSION=$(cat version.txt)
else
  die "ERROR: version.txt not found. \n
The install_sct script must be executed from the source directory"
fi

# Get installation type (from git or from package)
if [[ "x$SCT_INSTALL_TYPE" == "x" ]]; then
  if [[ -d ".git" ]]; then
    # folder .git exist, therefore it is a git installation
    SCT_INSTALL_TYPE="in-place"
  else
    SCT_INSTALL_TYPE="package"
  fi
fi

# Fetch OS type
if uname -a | grep -i darwin >/dev/null 2>&1; then
  # OSX

  # Fix for non-English Unicode systems on MAC
  if [[ -z $LC_ALL ]]; then
    export LC_ALL=en_US.UTF-8
  fi

  if [[ -z $LANG ]]; then
    export LANG=en_US.UTF-8
  fi

  OS=osx
  force_bashrc_loading
elif uname -a | grep -i linux >/dev/null 2>&1; then
  if cat /etc/issue | grep -i centos | grep 6. 2>&1; then
    # CentOS 6.X
    OS=linux_centos6
  elif cat /etc/issue | grep -i Red | grep 6. 2>&1; then
    # RedHat 6.X
    OS=linux_centos6
  else
    # Other Linux
    OS=linux
  fi
else
  die "Sorry, the installer only supports Linux and OSX, quitting installer"
fi

# Define sh files
if echo $(ps -o comm= $PPID) | grep csh; then
  THE_CSHRC=$HOME/.cshrc
  THE_RC=$THE_CSHRC
else
  THE_BASHRC=$HOME/.bashrc
  THE_RC=$THE_BASHRC
fi

# Display install info
echo -e "\nSCT version ......... "$SCT_VERSION
echo -e "Installation type ... "$SCT_INSTALL_TYPE
echo -e "Operating system .... "$OS
echo -e "Shell ............... "$THE_RC
# Check if sudo
if [[ $UID == 0 ]]; then
  echo -e "sudo mode ........... 1"
else
  echo -e "sudo mode ........... 0"
fi

# If you do not want the crash reports question to be ask,
# set ASK_REPORT_QUESTION at installation time like this:
# >>> ASK_REPORT_QUESTION=false ./install_sct
REPORT_STATS=no
if [[ ! $ASK_REPORT_QUESTION =~ ^([[Ff]alse?|[Nn]o?)$ ]]; then
  # Send crash statistic and error logs to developers, that is the
  # Questions
  echo
  cat <<EOF
To improve user experience and fix bugs, the SCT development team is using a
report system to automatically receive crash reports and errors from users.
These reports are anonymous.
EOF
  read -p 'Do you agree to help us improve SCT? [y]es/[n]o: ' -r REPORT_STATS
fi

if [[ $REPORT_STATS =~ [Yy](es)? ]]; then
  echo -ne '# Auto-generated by install_sct\nimport os\nSENTRY_DSN=os.environ.get("SCT_SENTRY_DSN", "https://5202d7c96ad84f17a24bd2653f1c4f9e:c1394bb176cc426caf0ff6a9095fb955@sentry.io/415369")\n' >spinalcordtoolbox/sentry_dsn.py
  echo "--> Crash reports will be sent to the SCT development team. Thank you!"
else
  echo "--> Crash reports will not be sent."
fi

# if installing from git folder, then becomes default installation folder
if [[ "$SCT_INSTALL_TYPE" == "in-place" ]]; then
  SCT_DIR=$SCT_SOURCE
else
  SCT_DIR="$HOME/sct_$SCT_VERSION"
fi

# Set install dir
while true; do
  echo -e "\nSCT will be installed here: [$SCT_DIR]"
  while [[ ! $change_default_path =~ ^([Yy](es)?|[Nn]o?)$ ]]; do
    echo -n "Do you agree? [y]es/[n]o: "
    read change_default_path
  done
  if [[ $change_default_path =~ ^[Yy] ]]; then
    # user accepts default path --> exit loop
    break
  fi
  echo -n "Choose install directory. Warning! Give full path (e.g. /usr/django/sct_v3.0): "
  # user enters new path
  read new_install

  # Expand ~/
  new_install=${new_install/#\~\//$HOME\/}
  # Remove trailing /
  new_install=${new_install%/}

  # Avoid horrible bug, like removing /bin if SCT_DIR "/" or $HOME/bin
  if [[ "$new_install" == "/" ]] || [[ "$HOME" == "${new_install%/}" ]]; then
    echo Cannot be installed directly in $new_install
    echo Please pick a full path
    continue
  elif [[ -d "$new_install" ]]; then
    # directory exists --> update SCT_DIR and exit loop
    echo -e "WARNING: Directory already exists. Files will be overwritten."
    SCT_DIR=$new_install
    break
  elif [[ ! "$new_install" ]]; then
    # If no input, asking again, and again, and again
    continue
  else
    SCT_DIR=$new_install
    break
  fi
done

# Create directory
mkdir -p $SCT_DIR
# check if directory was created
if [[ -d "$SCT_DIR" ]]; then
  # check write permission
  if [[ ! -w "$SCT_DIR" ]]; then
    die "ERROR: $SCT_DIR exists but does not have write permission."
  fi
else
  die "ERROR: $SCT_DIR cannot be created. Make sure you have write permission."
fi

# Update PATH variables based on Shell type
if [[ -z $THE_CSHRC ]]; then
  UPDATE_PATH="export PATH=$SCT_DIR/$BIN_DIR:$PATH"
  DISPLAY_UPDATE_PATH="export PATH=\"$SCT_DIR/$BIN_DIR:\$PATH\""
else
  UPDATE_PATH="setenv PATH $SCT_DIR/$BIN_DIR:$PATH"
  DISPLAY_UPDATE_PATH="setenv PATH \"$SCT_DIR/$BIN_DIR:\$PATH\""
fi

# Update MPLBACKEND on headless system. See: https://github.com/neuropoly/spinalcordtoolbox/issues/2137
if [[ -z $MPLBACKEND ]]; then
  # using bash
  if [[ -z $THE_CSHRC ]]; then
    export MPLBACKEND=Agg
  # using (t)csh
  else
    setenv MPLBACKEND Agg
  fi
fi

# Copy files to destination directory
if [[ "$SCT_DIR" != "$SCT_SOURCE" ]]; then
  echo -e "\nCopying source files from $SCT_SOURCE to $SCT_DIR"
  cp -vR $SCT_INSTALL_CP_OPTIONS "$SCT_SOURCE/"* "$SCT_DIR/" | while read line; do echo -n "."; done

else
  echo -e "\nSkipping copy of source files (source and destination folders are the same)"
fi

# Clean old install setup in bin/ if existing
if [[ -x $SCT_DIR/$BIN_DIR ]]; then
  echo -e "\nRemoving sct and isct softlink from $SCT_DIR/$BIN_DIR"
  find $SCT_DIR/$BIN_DIR -type l -name "sct_*" -exec rm {} \;
  find $SCT_DIR/$BIN_DIR -type l -name "isct_*" -exec rm {} \;
fi

# Go to installation folder
cd $SCT_DIR

# Make sure we are in SCT folder (to avoid deleting folder from user)
if [[ ! -f "version.txt" ]]; then
  die "\nERROR: Cannot cd into SCT folder. SCT_DIR="$SCT_DIR
fi

## Install Python
# We make sure that there is no conflict with local python install by unsetting PYTHONPATH
# and forcing PYTHONNOUSERSITE
unset PYTHONPATH
export PYTHONNOUSERSITE=1

# Install Python conda
echo -e "\nInstalling conda..."
cmd="rm -rf $SCT_DIR/$PYTHON_DIR"
echo ">> "$cmd
$cmd
cmd="mkdir -p $SCT_DIR/$PYTHON_DIR"
echo ">> "$cmd
$cmd
# downloading

case $OS in
linux*)
  download $TMP_DIR/miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
  ;;
osx)
  download $TMP_DIR/miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh
  ;;
esac

# run conda installer
cmd="bash $TMP_DIR/miniconda.sh -p $SCT_DIR/$PYTHON_DIR -b -f"
echo ">> "$cmd
$cmd
ret_code_conda=$?
if [[ $ret_code_conda != 0 ]]; then
  echo -e Conda did not installed properly with return code $ret_code_conda
  exit $ret_code_conda
else
  echo -e Conda installation successful
fi

# create py3.6 venv (for Keras/TF compatibility with Centos7, see issue #2270)
yes | python/bin/conda create -n venv_sct python=3.6

# activate miniconda
source python/etc/profile.d/conda.sh
conda activate venv_sct

#  conda install --yes anaconda-client
#  conda config --add channels conda-forge

# Install Python dependencies
echo -e "\nInstalling Python dependencies..."
pip install numpy
pip install -r requirements.txt # we do not include the requirements inside the setup.py because it is much faster to install all dependencies first (uses pre-compiled wheels)
if [[ $? != 0 ]]; then
  die "Failed running pip install -r requirements.txt: $?"
fi

## Install the spinalcordtoolbox into the Conda venv
pip install -e $SCT_DIR
e_status=$?
if [[ $e_status != 0 ]]; then
  echo "Failed to pip install sct."
  exit $e_status
fi

## Create launchers for Python scripts
echo -e "\nCreating launchers for Python scripts..."
mkdir -p $SCT_DIR/bin
for file in $SCT_DIR/python/envs/venv_sct/bin/*sct*; do
  cp "$file" "$SCT_DIR/bin/"
  res=$?
  if [[ $res != 0 ]]; then
    echo "\nProblem creating launchers!"
    exit $res
  fi
done

## Update PATH within this script (to launch sct_check_dependencies)
$UPDATE_PATH

## Install binaries
if [[ $NO_SCT_BIN_INSTALL ]]; then
  echo "SCT binaries will not be (re)-installed"
else
  echo -e "\nInstalling binaries..."
  if [[ $OS == "linux" ]]; then
    cmd="sct_download_data -d binaries_debian -o $SCT_DIR/$BIN_DIR"
    echo ">> "$cmd
    $cmd
    e_status=$?
  elif [[ $OS == "linux_centos6" ]]; then
    cmd="sct_download_data -d binaries_centos -o $SCT_DIR/$BIN_DIR"
    echo ">> "$cmd
    $cmd
    e_status=$?
  elif [[ $OS == "osx" ]]; then
    cmd="sct_download_data -d binaries_osx -o $SCT_DIR/$BIN_DIR"
    echo ">> "$cmd
    $cmd
    e_status=$?
  else
    die "Unsupported OS $OS: can't install binaries."
  fi
  if [[ $e_status != 0 ]]; then
    echo "Failed to download SCT binaries."
    exit $e_status
  fi
fi

echo -e "All requirements installed!"

## Install data
if [[ $NO_DATA_INSTALL ]]; then
  echo "data/ will not be (re)-install"
else
  # forcing activation if python is not reinstalled
  cmd=". $SCT_DIR/$PYTHON_DIR/bin/activate $SCT_DIR/$PYTHON_DIR"
  echo ">> "$cmd
  $cmd

  # Download data
  echo -e "\nInstalling data..."
  cmd="rm -rf $SCT_DIR/$DATA_DIR"
  echo ">> "$cmd
  $cmd
  cmd="mkdir -p $SCT_DIR/$DATA_DIR"
  echo ">> "$cmd
  $cmd
  cmd="cd $SCT_DIR/$DATA_DIR"
  echo ">> "$cmd
  $cmd
  for data in PAM50 gm_model optic_models pmj_models deepseg_sc_models deepseg_gm_models deepseg_lesion_models c2c3_disc_models; do
    cmd="sct_download_data -d $data"
    echo ">> "$cmd
    $cmd
    e_status=$?
    if [[ $e_status != 0 ]]; then
      echo "Failed to download SCT binaries."
      exit $e_status
    fi
  done
fi

## Deactivating conda
. $SCT_DIR/$PYTHON_DIR/bin/deactivate >/dev/null 2>&1

## Validate installation and update .bashrc
# if sudo=0
if [[ $UID != 0 ]]; then
  # In case of previous SCT installation (4.0.0-beta.1 or before), remove sct_env declaration in bashrc
  if [[ $OS == "osx" ]]; then
    sed -ie '/sct_env/ s/^#*/#/' $THE_RC
  else
    sed -e '/sct_env/ s/^#*/#/' -i $THE_RC
  fi
  # update PATH environment
  while [[ ! $add_to_path =~ ^([Yy](es)?|[Nn]o?)$ ]]; do
    echo -e -n "\nDo you want to add the sct_* scripts to your PATH environment? [y]es/[n]o: "
    read add_to_path
  done
  echo ""
  if [[ $add_to_path =~ ^[Yy] ]]; then
    edit_bashrc
  else
    echo Not adding $SCT_DIR to \$PATH
    echo You can always add it later or call SCT functions with full path $SCT_DIR/$BIN_DIR/sct_function
  fi
  # run sct_check_dependencies
  echo -e "Validate installation..."
  # We run the sct_check_dependencies in the TMP_DIR so the tmp.XXX output
  # it creates is cleaned properly
  if sct_check_dependencies; then
    if [[ $add_to_path =~ ^[Nn] ]]; then
      echo -e "To use SCT, please update your environment by running:\n"
      echo -e $DISPLAY_UPDATE_PATH
    else
      echo -e "Open a new Terminal window to load environment variables, or run:\n source $THE_RC\n"
    fi
  else
    die "Installation validation Failed!\n
Please copy the historic of this Terminal (starting with the command install_sct) and paste it in the SCT Help forum (create a new discussion):\n
http://forum.spinalcordmri.org/c/sct\n"
  fi
# if sudo=1
else
  echo -e "\nWARNING: sudo mode: Profile file was not edited. To complete installation, please add the following line to $THE_RC:"
  echo -e $DISPLAY_UPDATE_PATH
  echo -e "Then, please open a new Terminal and run sct_check_dependencies to make sure SCT is properly installed.\n"
fi
